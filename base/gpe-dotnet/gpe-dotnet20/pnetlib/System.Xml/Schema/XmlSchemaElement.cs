/*
 * XmlSchemaElement.cs - Implementation of "System.Xml.Schema.XmlSchemaElement" 
 *
 * Copyright (C) 2003  Southern Storm Software, Pty Ltd.
 * Copyright (C) 2003  FSF.
 * 
 * Authors : Autogenerated using csdoc2stub 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

namespace System.Xml.Schema
{
	public class XmlSchemaElement: XmlSchemaParticle
	{
		[TODO]
		public XmlSchemaElement()
		{
			 throw new NotImplementedException(".ctor");
		}

		[TODO]
		public System.Xml.Schema.XmlSchemaDerivationMethod Block 
		{
 			get
			{
				throw new NotImplementedException("Block");
			}
 			set
			{
				throw new NotImplementedException("Block");
			}
 		}

		[TODO]
		public System.Xml.Schema.XmlSchemaDerivationMethod BlockResolved 
		{
 			get
			{
				throw new NotImplementedException("BlockResolved");
			}
 		}

		[TODO]
		public System.Xml.Schema.XmlSchemaObjectCollection Constraints 
		{
 			get
			{
				throw new NotImplementedException("Constraints");
			}
 		}

		[TODO]
		public System.String DefaultValue 
		{
 			get
			{
				throw new NotImplementedException("DefaultValue");
			}
 			set
			{
				throw new NotImplementedException("DefaultValue");
			}
 		}

		[TODO]
		public System.Object ElementType 
		{
 			get
			{
				throw new NotImplementedException("ElementType");
			}
 		}

		[TODO]
		public System.Xml.Schema.XmlSchemaDerivationMethod Final 
		{
 			get
			{
				throw new NotImplementedException("Final");
			}
 			set
			{
				throw new NotImplementedException("Final");
			}
 		}

		[TODO]
		public System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved 
		{
 			get
			{
				throw new NotImplementedException("FinalResolved");
			}
 		}

		[TODO]
		public System.String FixedValue 
		{
 			get
			{
				throw new NotImplementedException("FixedValue");
			}
 			set
			{
				throw new NotImplementedException("FixedValue");
			}
 		}

		[TODO]
		public System.Xml.Schema.XmlSchemaForm Form 
		{
 			get
			{
				throw new NotImplementedException("Form");
			}
 			set
			{
				throw new NotImplementedException("Form");
			}
 		}

		[TODO]
		public bool IsAbstract 
		{
 			get
			{
				throw new NotImplementedException("IsAbstract");
			}
 			set
			{
				throw new NotImplementedException("IsAbstract");
			}
 		}

		[TODO]
		public bool IsNillable 
		{
 			get
			{
				throw new NotImplementedException("IsNillable");
			}
 			set
			{
				throw new NotImplementedException("IsNillable");
			}
 		}

		[TODO]
		public System.String Name 
		{
 			get
			{
				throw new NotImplementedException("Name");
			}
 			set
			{
				throw new NotImplementedException("Name");
			}
 		}

		[TODO]
		public System.Xml.XmlQualifiedName QualifiedName 
		{
 			get
			{
				throw new NotImplementedException("QualifiedName");
			}
 		}

		[TODO]
		public System.Xml.XmlQualifiedName RefName 
		{
 			get
			{
				throw new NotImplementedException("RefName");
			}
 			set
			{
				throw new NotImplementedException("RefName");
			}
 		}

		[TODO]
		public System.Xml.Schema.XmlSchemaType SchemaType 
		{
 			get
			{
				throw new NotImplementedException("SchemaType");
			}
 			set
			{
				throw new NotImplementedException("SchemaType");
			}
 		}

		[TODO]
		public System.Xml.XmlQualifiedName SchemaTypeName 
		{
 			get
			{
				throw new NotImplementedException("SchemaTypeName");
			}
 			set
			{
				throw new NotImplementedException("SchemaTypeName");
			}
 		}

		[TODO]
		public System.Xml.XmlQualifiedName SubstitutionGroup 
		{
 			get
			{
				throw new NotImplementedException("SubstitutionGroup");
			}
 			set
			{
				throw new NotImplementedException("SubstitutionGroup");
			}
 		}

	}
}//namespace