/*
 * XmlSchemaReader.cs - Implementation of "System.Xml.Schema.XmlSchemaReader" 
 *
 * Copyright (C) 2003  Southern Storm Software, Pty Ltd.
 * Copyright (C) 2003  FSF.
 * 
 * Authors : Autogenerated using csdoc2stub 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

namespace System.Xml.Schema
{
	public class XmlSchemaReader: System.Xml.XmlReader, System.Xml.IXmlLineInfo
	{
		[TODO]
		public XmlSchemaReader(System.Xml.XmlReader reader, System.Xml.Schema.ValidationEventHandler handler)
		{
			 throw new NotImplementedException(".ctor");
		}

		[TODO]
		public override void Close()
		{
			 throw new NotImplementedException("Close");
		}

		[TODO]
		public override bool Equals(System.Object obj)
		{
			 throw new NotImplementedException("Equals");
		}

		[TODO]
		public override System.String GetAttribute(int i)
		{
			 throw new NotImplementedException("GetAttribute");
		}

		[TODO]
		public override System.String GetAttribute(System.String name)
		{
			 throw new NotImplementedException("GetAttribute");
		}

		[TODO]
		public override System.String GetAttribute(System.String name, System.String namespaceURI)
		{
			 throw new NotImplementedException("GetAttribute");
		}

		[TODO]
		public override int GetHashCode()
		{
			 throw new NotImplementedException("GetHashCode");
		}

		[TODO]
		public bool HasLineInfo()
		{
			 throw new NotImplementedException("HasLineInfo");
		}

		[TODO]
		public override bool IsStartElement()
		{
			 throw new NotImplementedException("IsStartElement");
		}

		[TODO]
		public override bool IsStartElement(System.String localname, System.String ns)
		{
			 throw new NotImplementedException("IsStartElement");
		}

		[TODO]
		public override bool IsStartElement(System.String name)
		{
			 throw new NotImplementedException("IsStartElement");
		}

		[TODO]
		public override System.String LookupNamespace(System.String prefix)
		{
			 throw new NotImplementedException("LookupNamespace");
		}

		[TODO]
		public override void MoveToAttribute(int i)
		{
			 throw new NotImplementedException("MoveToAttribute");
		}

		[TODO]
		public override bool MoveToAttribute(System.String name)
		{
			 throw new NotImplementedException("MoveToAttribute");
		}

		[TODO]
		public override bool MoveToAttribute(System.String name, System.String ns)
		{
			 throw new NotImplementedException("MoveToAttribute");
		}

		[TODO]
		public override System.Xml.XmlNodeType MoveToContent()
		{
			 throw new NotImplementedException("MoveToContent");
		}

		[TODO]
		public override bool MoveToElement()
		{
			 throw new NotImplementedException("MoveToElement");
		}

		[TODO]
		public override bool MoveToFirstAttribute()
		{
			 throw new NotImplementedException("MoveToFirstAttribute");
		}

		[TODO]
		public override bool MoveToNextAttribute()
		{
			 throw new NotImplementedException("MoveToNextAttribute");
		}

		[TODO]
		public void RaiseInvalidElementError()
		{
			 throw new NotImplementedException("RaiseInvalidElementError");
		}

		[TODO]
		public override bool Read()
		{
			 throw new NotImplementedException("Read");
		}

		[TODO]
		public override bool ReadAttributeValue()
		{
			 throw new NotImplementedException("ReadAttributeValue");
		}

		[TODO]
		public override System.String ReadElementString()
		{
			 throw new NotImplementedException("ReadElementString");
		}

		[TODO]
		public override System.String ReadElementString(System.String localname, System.String ns)
		{
			 throw new NotImplementedException("ReadElementString");
		}

		[TODO]
		public override System.String ReadElementString(System.String name)
		{
			 throw new NotImplementedException("ReadElementString");
		}

		[TODO]
		public override void ReadEndElement()
		{
			 throw new NotImplementedException("ReadEndElement");
		}

		[TODO]
		public override System.String ReadInnerXml()
		{
			 throw new NotImplementedException("ReadInnerXml");
		}

		[TODO]
		public bool ReadNextElement()
		{
			 throw new NotImplementedException("ReadNextElement");
		}

		[TODO]
		public override System.String ReadOuterXml()
		{
			 throw new NotImplementedException("ReadOuterXml");
		}

		[TODO]
		public override void ReadStartElement()
		{
			 throw new NotImplementedException("ReadStartElement");
		}

		[TODO]
		public override void ReadStartElement(System.String localname, System.String ns)
		{
			 throw new NotImplementedException("ReadStartElement");
		}

		[TODO]
		public override void ReadStartElement(System.String name)
		{
			 throw new NotImplementedException("ReadStartElement");
		}

		[TODO]
		public override System.String ReadString()
		{
			 throw new NotImplementedException("ReadString");
		}

		[TODO]
		public override void ResolveEntity()
		{
			 throw new NotImplementedException("ResolveEntity");
		}

		[TODO]
		public override void Skip()
		{
			 throw new NotImplementedException("Skip");
		}

		[TODO]
		public void SkipToEnd()
		{
			 throw new NotImplementedException("SkipToEnd");
		}

		[TODO]
		public override System.String ToString()
		{
			 throw new NotImplementedException("ToString");
		}

		[TODO]
		public override int AttributeCount 
		{
 			get
			{
				throw new NotImplementedException("AttributeCount");
			}
 		}

		[TODO]
		public override System.String BaseURI 
		{
 			get
			{
				throw new NotImplementedException("BaseURI");
			}
 		}

		[TODO]
		public override bool CanResolveEntity 
		{
 			get
			{
				throw new NotImplementedException("CanResolveEntity");
			}
 		}

		[TODO]
		public override int Depth 
		{
 			get
			{
				throw new NotImplementedException("Depth");
			}
 		}

		[TODO]
		public override bool EOF 
		{
 			get
			{
				throw new NotImplementedException("EOF");
			}
 		}

		[TODO]
		public System.String FullName 
		{
 			get
			{
				throw new NotImplementedException("FullName");
			}
 		}

		[TODO]
		public override bool HasAttributes 
		{
 			get
			{
				throw new NotImplementedException("HasAttributes");
			}
 		}

		[TODO]
		public override bool HasValue 
		{
 			get
			{
				throw new NotImplementedException("HasValue");
			}
 		}

		[TODO]
		public override bool IsDefault 
		{
 			get
			{
				throw new NotImplementedException("IsDefault");
			}
 		}

		[TODO]
		public override bool IsEmptyElement 
		{
 			get
			{
				throw new NotImplementedException("IsEmptyElement");
			}
 		}

		[TODO]
		public override System.String this[int i] 
		{
 			get
			{
				throw new NotImplementedException("Item");
			}
 		}

		[TODO]
		public override System.String this[System.String name] 
		{
 			get
			{
				throw new NotImplementedException("Item");
			}
 		}

		[TODO]
		public override System.String this[System.String name, System.String namespaceURI] 
		{
 			get
			{
				throw new NotImplementedException("Item");
			}
 		}

		[TODO]
		public int LineNumber 
		{
 			get
			{
				throw new NotImplementedException("LineNumber");
			}
 		}

		[TODO]
		public int LinePosition 
		{
 			get
			{
				throw new NotImplementedException("LinePosition");
			}
 		}

		[TODO]
		public override System.String LocalName 
		{
 			get
			{
				throw new NotImplementedException("LocalName");
			}
 		}

		[TODO]
		public override System.String Name 
		{
 			get
			{
				throw new NotImplementedException("Name");
			}
 		}

		[TODO]
		public override System.Xml.XmlNameTable NameTable 
		{
 			get
			{
				throw new NotImplementedException("NameTable");
			}
 		}

		[TODO]
		public override System.String NamespaceURI 
		{
 			get
			{
				throw new NotImplementedException("NamespaceURI");
			}
 		}

		[TODO]
		public override System.Xml.XmlNodeType NodeType 
		{
 			get
			{
				throw new NotImplementedException("NodeType");
			}
 		}

		[TODO]
		public override System.String Prefix 
		{
 			get
			{
				throw new NotImplementedException("Prefix");
			}
 		}

		[TODO]
		public override char QuoteChar 
		{
 			get
			{
				throw new NotImplementedException("QuoteChar");
			}
 		}

		[TODO]
		public override System.Xml.ReadState ReadState 
		{
 			get
			{
				throw new NotImplementedException("ReadState");
			}
 		}

		[TODO]
		public override System.String Value 
		{
 			get
			{
				throw new NotImplementedException("Value");
			}
 		}

		[TODO]
		public override System.String XmlLang 
		{
 			get
			{
				throw new NotImplementedException("XmlLang");
			}
 		}

		[TODO]
		public override System.Xml.XmlSpace XmlSpace 
		{
 			get
			{
				throw new NotImplementedException("XmlSpace");
			}
 		}

	}
}//namespace