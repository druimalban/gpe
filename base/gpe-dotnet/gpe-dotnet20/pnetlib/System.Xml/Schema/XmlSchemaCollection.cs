/*
 * XmlSchemaCollection.cs - Implementation of "XmlSchemaCollection" 
 *
 * Copyright (C) 2003  Southern Storm Software, Pty Ltd.
 * Copyright (C) 2003  FSF.
 * 
 * Authors : Autogenerated using csdoc2stub 
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

using System;
using System.Xml;
using System.Collections;

namespace System.Xml.Schema
{
	public class XmlSchemaCollection: IEnumerable, ICollection
	{
		[TODO]
		public XmlSchemaCollection()
		{
			 throw new NotImplementedException(".ctor");
		}

		[TODO]
		public XmlSchemaCollection(XmlNameTable nametable)
		{
			 throw new NotImplementedException(".ctor");
		}

		[TODO]
		public XmlSchema Add(String ns, XmlReader reader)
		{
			 throw new NotImplementedException("Add");
		}

		[TODO]
		public XmlSchema Add(String ns, String uri)
		{
			 throw new NotImplementedException("Add");
		}

		[TODO]
		public XmlSchema Add(XmlSchema schema)
		{
			 throw new NotImplementedException("Add");
		}

		[TODO]
		public void Add(XmlSchemaCollection schema)
		{
			 throw new NotImplementedException("Add");
		}

		[TODO]
		public bool Contains(String ns)
		{
			 throw new NotImplementedException("Contains");
		}

		[TODO]
		public bool Contains(XmlSchema schema)
		{
			 throw new NotImplementedException("Contains");
		}

		[TODO]
		public void CopyTo(XmlSchema[] array, int index)
		{
			 throw new NotImplementedException("CopyTo");
		}

		[TODO]
		public XmlSchemaCollectionEnumerator GetEnumerator()
		{
			 throw new NotImplementedException("GetEnumerator");
		}

		[TODO]
		public int Count 
		{
 			get
			{
				throw new NotImplementedException("Count");
			}
 		}

		[TODO]
		public XmlSchema this[String ns] 
		{
 			get
			{
				throw new NotImplementedException("Item");
			}
 		}

		[TODO]
		public XmlNameTable NameTable 
		{
 			get
			{
				throw new NotImplementedException("NameTable");
			}
 		}

		bool ICollection.IsSynchronized
		{
			get
			{
				throw new NotImplementedException("ICollection.IsSynchronized");
			}
		}

		Object ICollection.SyncRoot
		{
			get
			{
				throw new NotImplementedException("ICollection.SyncRoot");
			}
		}

		void ICollection.CopyTo(Array array, int index)
		{
			this.CopyTo((XmlSchema[])array,index);
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return (IEnumerator)(this.GetEnumerator());
		}

	}
}//namespace
