line 3: %option gc_allocator
line 5: %node expression no_parent 6
line 7: %field type type_code no_value 1
line 10: %node binary expression 2
line 12: %field expr1 expression * no_value 0
line 13: %field expr2 expression * no_value 0
line 16: %node unary expression 2
line 19: %field expr expression * no_value 0
line 23: %node intnum expression 0
line 25: %field num int no_value 0
line 28: %node plus binary 0
line 29: %node minus binary 0
line 30: %node multiply binary 0
line 31: %node divide binary 0
line 32: %node negate unary 0
line 33: %node power binary 0
line 35: %operation void infer_type 2
line 35: %param expression * e 1
line 37: %case binary infer_type
line 57: %case unary infer_type
line 63: %case intnum infer_type
line 68: %case power infer_type
/* output.h.  Generated automatically by treecc */
#ifndef __yy_output_h
#define __yy_output_h

#ifdef __cplusplus
extern "C" {
#endif

#define expression_kind 1
#define binary_kind 2
#define unary_kind 3
#define intnum_kind 4
#define plus_kind 5
#define minus_kind 6
#define multiply_kind 7
#define divide_kind 8
#define power_kind 10
#define negate_kind 9

typedef struct expression__ expression;
typedef struct binary__ binary;
typedef struct unary__ unary;
typedef struct intnum__ intnum;
typedef struct plus__ plus;
typedef struct minus__ minus;
typedef struct multiply__ multiply;
typedef struct divide__ divide;
typedef struct power__ power;
typedef struct negate__ negate;

#line 1 "c_gc_skel.h"
typedef struct
{
	int dummy__;

} YYNODESTATE;
#line 38 "output.h"
struct expression__ {
	const struct expression_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
};

struct expression_vtable__ {
	const void *parent__;
	int kind__;
	const char *name__;
};

extern struct expression_vtable__ const expression_vt__;

struct binary__ {
	const struct binary_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr1;
	expression * expr2;
};

struct binary_vtable__ {
	const struct expression_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct binary_vtable__ const binary_vt__;

struct unary__ {
	const struct unary_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr;
};

struct unary_vtable__ {
	const struct expression_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct unary_vtable__ const unary_vt__;

struct intnum__ {
	const struct intnum_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	int num;
};

struct intnum_vtable__ {
	const struct expression_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct intnum_vtable__ const intnum_vt__;

struct plus__ {
	const struct plus_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr1;
	expression * expr2;
};

struct plus_vtable__ {
	const struct binary_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct plus_vtable__ const plus_vt__;

struct minus__ {
	const struct minus_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr1;
	expression * expr2;
};

struct minus_vtable__ {
	const struct binary_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct minus_vtable__ const minus_vt__;

struct multiply__ {
	const struct multiply_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr1;
	expression * expr2;
};

struct multiply_vtable__ {
	const struct binary_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct multiply_vtable__ const multiply_vt__;

struct divide__ {
	const struct divide_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr1;
	expression * expr2;
};

struct divide_vtable__ {
	const struct binary_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct divide_vtable__ const divide_vt__;

struct power__ {
	const struct power_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr1;
	expression * expr2;
};

struct power_vtable__ {
	const struct binary_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct power_vtable__ const power_vt__;

struct negate__ {
	const struct negate_vtable__ *vtable__;
	int kind__;
	char *filename__;
	long linenum__;
	type_code type;
	expression * expr;
};

struct negate_vtable__ {
	const struct unary_vtable__ *parent__;
	int kind__;
	const char *name__;
};

extern struct negate_vtable__ const negate_vt__;

extern expression *intnum_create(int num);
extern expression *plus_create(expression * expr1, expression * expr2);
extern expression *minus_create(expression * expr1, expression * expr2);
extern expression *multiply_create(expression * expr1, expression * expr2);
extern expression *divide_create(expression * expr1, expression * expr2);
extern expression *power_create(expression * expr1, expression * expr2);
extern expression *negate_create(expression * expr);

extern void infer_type(expression * e);

#ifndef yykind
#define yykind(node__) ((node__)->kind__)
#endif

#ifndef yykindname
#define yykindname(node__) ((node__)->vtable__->name__)
#endif

#ifndef yykindof
#define yykindof(type__) (type__##_kind)
#endif

#ifndef yyisa
extern int yyisa__(const void *vtable__, int kind__);
#define yyisa(node__,type__) \
	(yyisa__((node__)->vtable__, (type__##_kind)))
#endif

#ifndef yygetfilename
#define yygetfilename(node__) ((node__)->filename__)
#endif

#ifndef yygetlinenum
#define yygetlinenum(node__) ((node__)->linenum__)
#endif

#ifndef yysetfilename
#define yysetfilename(node__, value__) \
	((node__)->filename__ = (value__))
#endif

#ifndef yysetlinenum
#define yysetlinenum(node__, value__) \
	((node__)->linenum__ = (value__))
#endif

#ifndef yytracklines_declared
extern char *yycurrfilename(void);
extern long yycurrlinenum(void);
#define yytracklines_declared 1
#endif

#ifndef yynodeops_declared
extern void yynodeinit(void);
extern void *yynodealloc(unsigned int size__);
extern int yynodepush(void);
extern void yynodepop(void);
extern void yynodeclear(void);
extern void yynodefailed(void);
#define yynodeops_declared 1
#endif

#ifdef __cplusplus
};
#endif

#endif
/* output.c.  Generated automatically by treecc */

#define YYNODESTATE_TRACK_LINES 1
#line 1 "c_gc_skel.c"
/*
 * treecc node allocation routines for C.
 *
 * Copyright (C) 2003  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * As a special exception, when this file is copied by treecc into
 * a treecc output file, you may use that output file without restriction.
 */

#include <stdlib.h>
#include <gc.h>

/*
 * Initialize the node allocation pool.
 */
#ifdef YYNODESTATE_REENTRANT
void yynodeinit(state__)
YYNODESTATE *state__;
{
#else
void yynodeinit()
{
#endif
	GC_INIT();
	GC_init();
}

/*
 * Allocate a block of memory.
 */
#ifdef YYNODESTATE_REENTRANT
void *yynodealloc(state__, size__)
YYNODESTATE *state__;
unsigned int size__;
{
#else
void *yynodealloc(size__)
unsigned int size__;
{
#endif
	return (void *)GC_MALLOC((size_t)size__);
}

/*
 * Push the node allocation state.  Not used in the GC version.
 */
#ifdef YYNODESTATE_REENTRANT
int yynodepush(state__)
YYNODESTATE *state__;
{
#else
int yynodepush()
{
#endif
	return 1;
}

/*
 * Pop the node allocation state.  Not used in the GC version.
 */
#ifdef YYNODESTATE_REENTRANT
void yynodepop(state__)
YYNODESTATE *state__;
{
#else
void yynodepop()
{
#endif
}

/*
 * Clear the node allocation pool completely.  Not used in the GC version.
 */
#ifdef YYNODESTATE_REENTRANT
void yynodeclear(state__)
YYNODESTATE *state__;
{
#else
void yynodeclear()
{
#endif
}
#line 102 "output.c"
struct expression_vtable__ const expression_vt__ = {
	0,
	expression_kind,
	"expression",
};

struct binary_vtable__ const binary_vt__ = {
	&expression_vt__,
	binary_kind,
	"binary",
};

struct unary_vtable__ const unary_vt__ = {
	&expression_vt__,
	unary_kind,
	"unary",
};

struct intnum_vtable__ const intnum_vt__ = {
	&expression_vt__,
	intnum_kind,
	"intnum",
};

struct plus_vtable__ const plus_vt__ = {
	&binary_vt__,
	plus_kind,
	"plus",
};

struct minus_vtable__ const minus_vt__ = {
	&binary_vt__,
	minus_kind,
	"minus",
};

struct multiply_vtable__ const multiply_vt__ = {
	&binary_vt__,
	multiply_kind,
	"multiply",
};

struct divide_vtable__ const divide_vt__ = {
	&binary_vt__,
	divide_kind,
	"divide",
};

struct power_vtable__ const power_vt__ = {
	&binary_vt__,
	power_kind,
	"power",
};

struct negate_vtable__ const negate_vt__ = {
	&unary_vt__,
	negate_kind,
	"negate",
};

expression *intnum_create(int num)
{
	intnum *node__ = (intnum *)yynodealloc(sizeof(struct intnum__));
	if(node__ == 0) return 0;
	node__->vtable__ = &intnum_vt__;
	node__->kind__ = intnum_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->num = num;
	return (expression *)node__;
}

expression *plus_create(expression * expr1, expression * expr2)
{
	plus *node__ = (plus *)yynodealloc(sizeof(struct plus__));
	if(node__ == 0) return 0;
	node__->vtable__ = &plus_vt__;
	node__->kind__ = plus_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->expr1 = expr1;
	node__->expr2 = expr2;
	return (expression *)node__;
}

expression *minus_create(expression * expr1, expression * expr2)
{
	minus *node__ = (minus *)yynodealloc(sizeof(struct minus__));
	if(node__ == 0) return 0;
	node__->vtable__ = &minus_vt__;
	node__->kind__ = minus_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->expr1 = expr1;
	node__->expr2 = expr2;
	return (expression *)node__;
}

expression *multiply_create(expression * expr1, expression * expr2)
{
	multiply *node__ = (multiply *)yynodealloc(sizeof(struct multiply__));
	if(node__ == 0) return 0;
	node__->vtable__ = &multiply_vt__;
	node__->kind__ = multiply_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->expr1 = expr1;
	node__->expr2 = expr2;
	return (expression *)node__;
}

expression *divide_create(expression * expr1, expression * expr2)
{
	divide *node__ = (divide *)yynodealloc(sizeof(struct divide__));
	if(node__ == 0) return 0;
	node__->vtable__ = &divide_vt__;
	node__->kind__ = divide_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->expr1 = expr1;
	node__->expr2 = expr2;
	return (expression *)node__;
}

expression *power_create(expression * expr1, expression * expr2)
{
	power *node__ = (power *)yynodealloc(sizeof(struct power__));
	if(node__ == 0) return 0;
	node__->vtable__ = &power_vt__;
	node__->kind__ = power_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->expr1 = expr1;
	node__->expr2 = expr2;
	return (expression *)node__;
}

expression *negate_create(expression * expr)
{
	negate *node__ = (negate *)yynodealloc(sizeof(struct negate__));
	if(node__ == 0) return 0;
	node__->vtable__ = &negate_vt__;
	node__->kind__ = negate_kind;
	node__->filename__ = yycurrfilename();
	node__->linenum__ = yycurrlinenum();
	node__->expr = expr;
	return (expression *)node__;
}

void infer_type(expression * e__)
{
	switch(e__->kind__)
	{
		case power_kind:
		{
			power *e = (power *)e__;
#line 69 "output17.tst"
			{
				infer_type(e->expr1);
				infer_type(e->expr2);
			
				if(e->expr2->type != int_type)
				{
					error("second sub-expression to `^' is not an integer");
				}
			
				e->type = e->expr1->type;
			}
#line 271 "output.c"
		}
		break;

		case binary_kind:
		case plus_kind:
		case minus_kind:
		case multiply_kind:
		case divide_kind:
		{
			binary *e = (binary *)e__;
#line 38 "output17.tst"
			{
				type_code type1, type2;
			
				infer_type(e->expr1);
				type1 = e->expr1->type;
			
				infer_type(e->expr2);
				type2 = e->expr2->type;
			
				if(type1 == float_type || type2 == float_type)
				{
					e->type = float_type;
				}
				else
				{
					e->type = int_type;
				}
			}
#line 301 "output.c"
		}
		break;

		case unary_kind:
		case negate_kind:
		{
			unary *e = (unary *)e__;
#line 58 "output17.tst"
			{
				infer_type(e->expr);
				e->type = e->expr->type;
			}
#line 314 "output.c"
		}
		break;

		case intnum_kind:
		{
			intnum *e = (intnum *)e__;
#line 64 "output17.tst"
			{
				e->type = int_type;
			}
#line 325 "output.c"
		}
		break;

		default: break;
	}
}

struct yy_vtable__ {
	const struct yy_vtable__ *parent__;
	int kind__;
};

int yyisa__(const void *vtable__, int kind__)
{
	const struct yy_vtable__ *vt;
	vt = (const struct yy_vtable__ *)vtable__;
	while(vt != 0) {
		if(vt->kind__ == kind__)
			return 1;
		vt = vt->parent__;
	}
	return 0;
}

