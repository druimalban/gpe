/*
 * cs_cast.tc - Semantic analysis for C# cast operators.
 *
 * Copyright (C) 2001, 2002  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%decls %{

/*
 * Convert a type into a printable name, suitable for use in error messages.
 */
const char *CSTypeToName(ILType *type);

%}

/*
 * Perform semantic analysis for a user-level cast operator.
 */
ILNode_SemAnalysis(ILNode_UserCast)
{
	CSSemValue type;
	CSSemValue value;
	ILEvalValue evalValue;

	/* Perform semantic analysis on the type and value expressions */
	type = ILNode_SemAnalysisType(node->expr1, info, &(node->expr1));
	/* TODO: fix here when we refactor SemAnalysisType */
	value = ILNode_SemAnalysis(node->expr2, info, &(node->expr2));

	/* Validate the value */
	if(!CSSemIsValue(value))
	{
		CCErrorOnLine(yygetfilename(node->expr2), yygetlinenum(node->expr2),
					  "invalid value supplied to cast");
		if(CSSemIsType(type))
		{
			CSSemSetRValue(value, CSSemGetType(type));
		}
		else
		{
			CSSemSetRValue(value, ILType_Int32);
		}
	}

	/* Validate the type */
	if(!CSSemIsType(type))
	{
		CCErrorOnLine(yygetfilename(node->expr1), yygetlinenum(node->expr1),
					  "invalid type supplied to cast");
		CSSemSetType(type, CSSemGetType(value));
	}

	/* Determine if we can cast between the types */
	if(CSSemGetType(value) == ILType_Null && 
		CSSemGetType(type) == ILType_Int)
	{
		// Special case (IntPtr)(null) is possible even without a NULL
		// replacing with IntPtr.Zero
		*parent = ILNode_Int_create(0,0,0); 
		node->expr2 = *parent;
		CSSemSetRValue(value, CSSemGetType(type));
	}

	if(!ILCast(info, node->expr2, &(node->expr2),
			   CSSemGetType(value), CSSemGetType(type),1))
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "cannot cast from `%s' to `%s'",
					  CSTypeToName(CSSemGetType(value)),
					  CSTypeToName(CSSemGetType(type)));
	}
	else
	{
		/* Replace this node with the converted node */
		*parent = node->expr2;
	}

	/* Return an rvalue of the final type to the caller */
	if(ILNode_EvalConst(*parent, info, &evalValue))
	{
		if(!(info->overflowInsns) && !(info->overflowChanged))
		{
			/* Re-evaluate in overflow mode to see if an explicit
			   "unchecked(x)" is required around the expression */
			ILEvalValue evalValue2;
			int result;
			info->overflowInsns = 1;
			info->overflowChanged = 1;
			result = ILNode_EvalConst(*parent, info, &evalValue2);
			info->overflowInsns = 0;
			info->overflowChanged = 0;
			if(!result)
			{
				CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "constant value cannot be converted to `%s' "
							  "without an explicit `unchecked' context",
							  CSTypeToName(CSSemGetType(type)));
			}
		}
		CSSemSetConstant(value, CSSemGetType(type), evalValue);
		CSSemReplaceWithConstant(parent, value);
	}
	else
	{
		CSSemSetRValue(value, CSSemGetType(type));
	}
	return value;
}

%end %{

const char *CSTypeToName(ILType *type)
{
	if(ILType_IsPrimitive(type))
	{
		/* Get the name of a primitive type */
		switch(ILType_ToElement(type))
		{
			case IL_META_ELEMTYPE_VOID:			return "void";
			case IL_META_ELEMTYPE_BOOLEAN:		return "bool";
			case IL_META_ELEMTYPE_I1:			return "sbyte";
			case IL_META_ELEMTYPE_U1:			return "byte";
			case IL_META_ELEMTYPE_I2:			return "short";
			case IL_META_ELEMTYPE_U2:			return "ushort";
			case IL_META_ELEMTYPE_CHAR:			return "char";
			case IL_META_ELEMTYPE_I4:			return "int";
			case IL_META_ELEMTYPE_U4:			return "uint";
			case IL_META_ELEMTYPE_I8:			return "long";
			case IL_META_ELEMTYPE_U8:			return "ulong";
			case IL_META_ELEMTYPE_R4:			return "float";
			case IL_META_ELEMTYPE_R8:			return "double";
			case IL_META_ELEMTYPE_R:			return "double";
			case IL_META_ELEMTYPE_I:			return "System.IntPtr";
			case IL_META_ELEMTYPE_U:			return "System.UIntPtr";
			case IL_META_ELEMTYPE_STRING:		return "System.String";
			case IL_META_ELEMTYPE_OBJECT:		return "System.Object";
			case IL_META_ELEMTYPE_TYPEDBYREF:	return "System.TypedReference";
		}
		if(type == ILType_Null)
		{
			return "null";
		}
	}
	else if(ILType_IsValueType(type) || ILType_IsClass(type))
	{
		/* Get the name of a value or class type */
		ILClass *classInfo = ILType_ToClass(type);
		const char *name = ILClass_Name(classInfo);
		const char *namespace = ILClass_Namespace(classInfo);
		const char *finalName;
		if(namespace)
		{
			finalName = ILInternAppendedString
						(ILInternAppendedString
							(ILInternString((char *)namespace, -1),
							 ILInternString((char *)".", 1)),
						 ILInternString((char *)name, -1)).string;
		}
		else
		{
			finalName = name;
		}
		if(ILClass_NestedParent(classInfo) != 0)
		{
			/* Prepend the name of the enclosing nesting class */
			const char *parentName = CSTypeToName
				(ILType_FromClass(ILClass_NestedParent(classInfo)));
			finalName = ILInternAppendedString
						(ILInternAppendedString
							(ILInternString((char *)parentName, -1),
							 ILInternString((char *)".", 1)),
						 ILInternString((char *)finalName, -1)).string;
		}
		return finalName;
	}
	else if(type != ILType_Invalid)
	{
		/* Get the name of a complex type */
		int kind = ILType_Kind(type);
		if(kind == IL_TYPE_COMPLEX_BYREF)
		{
			return ILInternAppendedString
					(ILInternString((char *)CSTypeToName(ILType_Ref(type)), -1),
					 ILInternString((char *)" &", 2)).string;
		}
		else if(kind == IL_TYPE_COMPLEX_PTR)
		{
			return ILInternAppendedString
					(ILInternString((char *)CSTypeToName(ILType_Ref(type)), -1),
					 ILInternString((char *)" *", 2)).string;
		}
		else if(kind == IL_TYPE_COMPLEX_ARRAY ||
			    kind == IL_TYPE_COMPLEX_ARRAY_CONTINUE)
		{
			ILType *elemType = ILType_ElemType(type);
			ILIntString str;
			ILIntString open;
			ILIntString close;
			ILIntString comma;
			while(ILType_IsComplex(elemType) && elemType != ILType_Invalid &&
			      (ILType_Kind(elemType) == IL_TYPE_COMPLEX_ARRAY ||
				   ILType_Kind(elemType) == IL_TYPE_COMPLEX_ARRAY))
			{
				elemType = ILType_ElemType(elemType);
			}
			str = ILInternString((char *)CSTypeToName(elemType), -1);
			open = ILInternString((char *)"[", 1);
			close = ILInternString((char *)"]", 1);
			comma = ILInternString((char *)",", 1);
			str = ILInternAppendedString(str, open);
			while(type != elemType)
			{
				if(ILType_Kind(type) == IL_TYPE_COMPLEX_ARRAY)
				{
					str = ILInternAppendedString(str, close);
					type = ILType_ElemType(type);
					if(type != elemType)
					{
						str = ILInternAppendedString(str, open);
					}
				}
				else
				{
					str = ILInternAppendedString(str, comma);
					type = ILType_ElemType(type);
				}
			}
			return str.string;
		}
		else if(kind == IL_TYPE_COMPLEX_CMOD_REQD ||
				kind == IL_TYPE_COMPLEX_CMOD_OPT)
		{
			ILIntString str;
			ILIntString temp;
			if(kind == IL_TYPE_COMPLEX_CMOD_REQD)
			{
				str = ILInternString("/* reqd ", -1);
			}
			else
			{
				str = ILInternString("/* opt ", -1);
			}
			temp = ILInternString
			  ((char *)(CSTypeToName(ILType_FromClass
			  				(type->un.modifier__.info__))), -1);
			str = ILInternAppendedString(str, temp);
			temp = ILInternString(" */ ", -1);
			str = ILInternAppendedString(str, temp);
			temp = ILInternString
				((char *)(CSTypeToName(type->un.modifier__.type__)), -1);
			str = ILInternAppendedString(str, temp);
			return str.string;
		}
		else if((kind & IL_TYPE_COMPLEX_METHOD) != 0)
		{
			ILIntString str;
			ILIntString temp;
			unsigned long num;
			unsigned long param;
			ILType *paramType;

			/* Convert the return type */
			str = ILInternString
				((char *)(CSTypeToName(ILTypeGetReturnWithPrefixes(type))), -1);

			/* Add the start of the parameter list */
			temp = ILInternString(" * (", -1);
			str = ILInternAppendedString(str, temp);

			/* Indicate if the type has a "this" parameter */
			if(ILType_HasThis(type))
			{
				temp = ILInternString("/*this,*/ ", -1);
				str = ILInternAppendedString(str, temp);
			}

			/* Add the parameters to the list */
			num = ILTypeNumParams(type);
			for(param = 1; param <= num; ++param)
			{
				paramType = ILTypeGetParamWithPrefixes(type, param);
				temp = ILInternString((char *)(CSTypeToName(paramType)), -1);
				str = ILInternAppendedString(str, temp);
				if(param < num)
				{
					temp = ILInternString(", ", 2);
					str = ILInternAppendedString(str, temp);
				}
			}

			/* Terminate the parameter list and return */
			temp = ILInternString(")", 1);
			str = ILInternAppendedString(str, temp);
			return str.string;
		}
	}
	return "invalid type";
}

%}

