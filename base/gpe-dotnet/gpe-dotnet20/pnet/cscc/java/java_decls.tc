/*
 * java_decl.tc - Class, Method, and Field declarations
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 * Copyright (C) 2003  Gopal.V
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

%{

/*
 * Error reporting function for "ILGenImplementsAllInterfaces".
 */
static void InterfaceErrorFunc(ILNode *node, ILClass *classInfo,
							   ILMember *missingMember)
{
	CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
				  _("`%s' does not implement `%s'"),
				  JavaTypeToName(ILClassToType(classInfo)),
				  JavaItemToName((ILProgramItem *)missingMember));
}

/*
 * Proxy reporting function for "ILGenImplementsAllInterfaces".
 */
static void InterfaceProxyFunc(ILNode *node, ILClass *classInfo,
							   ILMethod *missingMember,
							   ILMethod *proxyReplacement)
{
	CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
				  _("`%s' does not implement `%s'"),
				  JavaTypeToName(ILClassToType(classInfo)),
				  JavaItemToName((ILProgramItem *)missingMember));
}

/*  Since we can't (shouldn't?) inherit list from multiple types, this
 *  operation will iterate over a list of declarations adding to the 
 *  compound constructor */
static void JavaListGatherStaticCtor(ILNode_List *node, ILNode_List *ctor)
{
	ILNode_ListIter iter;
	ILNode_Declaration *curr;

	if (yyisa(node, ILNode_List) || node == 0)
	{
		/* Iterate through the body gathering up the necessary constructors */
		ILNode_ListIter_Init(&iter, node);
		while ((curr = (ILNode_Declaration *)ILNode_ListIter_Next(&iter)))
		{
			ILNode_Declaration_GatherStaticCtor(curr, ctor);
		}
	}
}

/* 
 * append entries in the oldList to the collectedList to order
 * the user specified static ctors after the ones from field decl
 */
static void AppendStaticCtor(ILNode_List *collectedList, 
							 ILNode_List *oldList)
{
	ILNode_ListIter iter;
	ILNode *curr;

	if(!oldList)return;

	if (yyisa(oldList, ILNode_List))
	{
		ILNode_ListIter_Init(&iter,oldList);
		while((curr = ILNode_ListIter_Next(&iter)))
		{
			ILNode_List_Add(collectedList,curr);
		}
	}
}

%}

%operation void ILNode_Declaration_GatherStaticCtor
		([ILNode_Declaration *node], ILNode_List *ctor) = {0};
/*
 * Perform semantic analysis for class definitions.
 */
ILNode_JSemAnalysis(ILNode_ClassDefn)
{
	JavaSemValue value;
	ILNode *savedClass;
	ILNode *savedNamespace;
	ILNode *savedMethod;
	ILNode *staticCtorList=NULL;
	int hadStaticCtorsBefore;

	/* Determine if we have already visited this node */
	if(node->visited == ILVisitMode_Processing)
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "circularity detected in class definition");
		return JavaSemValueDefault;
	}
	else if(node->visited == ILVisitMode_Done)
	{
		return JavaSemValueDefault;
	}
	node->visited = ILVisitMode_Processing;

	/* Perform semantic analysis on the node */
	hadStaticCtorsBefore = (node->staticCtors != 0);
	if(node->body)
	{
		savedClass = info->currentClass;
		savedNamespace = info->currentNamespace;
		savedMethod = info->currentMethod;
		info->currentClass = (ILNode *)node;
		info->currentNamespace = node->namespaceNode;
		info->currentMethod = NULL;
		value = ILNode_JSemAnalysis(node->body, info, &(node->body));
		if(node->initCtorsMethod)
		{
			/* Perform semantic analysis on the non-static initializers */
			ILNode_JSemAnalysis(node->initCtorsMethod, info,
							   &(node->initCtorsMethod));
		}
		/*  save the explicit static constructors before gathering  */
		if (node->staticCtors)
		{
			staticCtorList=node->staticCtors;
		}

		node->staticCtors=ILNode_List_create();
		ILNode_Declaration_GatherStaticCtor
								(   (ILNode_Declaration *)node->body, 
									(ILNode_List *)node->staticCtors);

		/* append the explicit static constructors to the end of the 
		   gathered list */
		  
		AppendStaticCtor((ILNode_List*)node->staticCtors,
						  (ILNode_List*) staticCtorList);

		staticCtorList=NULL; /* do not use it again or segfault :-) */

		if (ILNode_List_Length(node->staticCtors) == 0)
		{
			/*  There were no static constructors after all  */
			node->staticCtors = 0;
		}
		else
		{
			/* Create a method for the static constructors and
			   then perform semantic analysis on its contents */
			ILMethod *methodInfo;
			ILType *signature;
			node->staticCtorsMethod =
				ILNode_MethodDeclaration_create
					(0, IL_META_METHODDEF_PRIVATE |
						IL_META_METHODDEF_STATIC |
						IL_META_METHODDEF_HIDE_BY_SIG |
						IL_META_METHODDEF_SPECIAL_NAME |
						IL_META_METHODDEF_RT_SPECIAL_NAME,
					 0 /* void */,
					 ILQualIdentSimple(ILInternString(".cctor", 6).string),
					 0 /* no parameters */,
					 ILNode_NewScope_create(node->staticCtors));
			methodInfo = ILMethodCreate(node->classInfo, 0, ".cctor",
										IL_META_METHODDEF_PRIVATE |
										IL_META_METHODDEF_STATIC |
										IL_META_METHODDEF_HIDE_BY_SIG |
										IL_META_METHODDEF_SPECIAL_NAME |
										IL_META_METHODDEF_RT_SPECIAL_NAME);
			if(!methodInfo)
			{
				CCOutOfMemory();
			}
			signature = ILTypeCreateMethod(info->context, ILType_Void);
			if(!signature)
			{
				CCOutOfMemory();
			}
			ILMemberSetSignature((ILMember *)methodInfo, signature);
			((ILNode_MethodDeclaration *)(node->staticCtorsMethod))
					->methodInfo = methodInfo;
			ILNode_JSemAnalysis(node->staticCtorsMethod, info,
							   &(node->staticCtorsMethod));
		}
		info->currentClass = savedClass;
		info->currentNamespace = savedNamespace;
		info->currentMethod = savedMethod;
	}
	else
	{
		JavaSemSetRValue(value, ILType_Int32);
	}
	if(node->classInfo && !ILClass_IsInterface(node->classInfo))
	{
		/* Check that the class implements all of its interfaces */
		ILGenImplementsAllInterfaces(info, (ILNode *)node, node->classInfo,
									 InterfaceErrorFunc,InterfaceProxyFunc);
	}
	if(!hadStaticCtorsBefore && node->staticCtors)
	{
		/* The class contains static initializers for fields, but no
		   explicit static constructor.  Add the "beforefieldinit"
		   flag to the set of modifiers */
		node->modifiers |= IL_META_TYPEDEF_BEFORE_FIELD_INIT;
		if(node->classInfo)
		{
			ILClassSetAttrs(node->classInfo,
							IL_META_TYPEDEF_BEFORE_FIELD_INIT,
							IL_META_TYPEDEF_BEFORE_FIELD_INIT);
		}
	}
	/* We have finished processing this node */
	node->visited = ILVisitMode_Done;
	return JavaSemValueDefault;
	
}

ILNode_JSemAnalysis(ILNode_MethodDeclaration)
{
	ILNode *savedMethod;
	ILNode_NewScope *newScope;
	ILScope *scope;
	ILScope *savedScope;
	unsigned long argNum;
	unsigned long argIndex;
	ILNode_ListIter iter;
	ILNode_FormalParameter *param;
	ILScopeData *data;
	char *name;
	ILNode *errorNode;
	ILType *returnType;
	
	/* Determine if we have already visited this node */
	if(node->visited == ILVisitMode_Processing)
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "circularity detected in method definition");
		return JavaSemValueDefault;
	}
	else if(node->visited == ILVisitMode_Done)
	{
		return JavaSemValueDefault;
	}
	node->visited = ILVisitMode_Processing;

	/* Record the current method that we are in */
	savedMethod = info->currentMethod;
	info->currentMethod = (ILNode *)node;

	/* Get the method's local variable scope */
	if(node->body && yykind(node->body) == yykindof(ILNode_NewScope))
	{
		newScope = (ILNode_NewScope *)(node->body);
		if(!(newScope->scope))
		{
			newScope->scope = ILScopeCreate(info, info->currentScope);
		}
		scope = newScope->scope;
	}
	else
	{
		scope = ILScopeCreate(info, info->currentScope);
	}

	/* Declare the parameters into the method's local variable scope */
	if((node->modifiers & IL_META_METHODDEF_STATIC) == 0)
	{
		/* Non-static parameters start at argument 1 */
		argNum = 1;
	}
	else
	{
		/* Static parameters start at argument 0 */
		argNum = 0;
	}
	argIndex = 1;
	ILNode_ListIter_Init(&iter, node->params);
	while((param = (ILNode_FormalParameter *)ILNode_ListIter_Next(&iter)) != 0)
	{
		name = ILQualIdentName(param->name, 0);
		data = ILScopeLookup(scope, name, 0);
		if(data)
		{
			CCErrorOnLine(yygetfilename(param->name),
						  yygetlinenum(param->name),
						  "`%s' is already declared in this scope", name);
			errorNode = ILScopeDataGetNode(data);
			if(errorNode)
			{
				CCErrorOnLine(yygetfilename(errorNode),
							  yygetlinenum(errorNode),
							  "previous declaration here");
			}
		}
		else
		{
			ILScopeDeclareLocal(scope, name, argNum | JAVA_LOCAL_IS_ARG,
								param->name);
		}
		++argNum;
		++argIndex;
	}

	/* Perform semantic analysis on the method body */
	if(node->body)
	{
		if((node->modifiers & IL_META_METHODDEF_ABSTRACT) != 0)
		{
			CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
						  "`abstract' cannot be used with a method body");
		}
		savedScope = info->currentScope;
		info->currentScope = scope;
		ILNode_JSemAnalysis(node->body, info, &(node->body));
		info->currentScope = savedScope;
	}
	else if((node->modifiers & IL_META_METHODDEF_ABSTRACT) == 0)
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
			  "method with no body requires `abstract'");
	}

	/* If the return type is not void, then make sure that the
	   method ends in some kind of return statement */
	returnType = ILTypeGetReturn(ILMethod_Signature(node->methodInfo));
	if(returnType != ILType_Void && node->body)
	{
		if(!ILMethod_IsAbstract(node->methodInfo) &&
		   ILMethod_IsIL(node->methodInfo))
		{
			if(!ILNodeEndsInFlowChange(node->body,info))
			{
				CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
							  "control reaches end of non-void method");
			}
		}
	}

	/* Return to the previous method level */
	info->currentMethod = savedMethod;

	/* Finished visiting this node */
	node->visited = ILVisitMode_Done;

	/* Methods don't really have a semantic value, so return the default */
	return JavaSemValueDefault;
}


/*
 * Perform semantic analysis for declaration scope changes.
 */
ILNode_JSemAnalysis(ILNode_ScopeChange)
{
	JavaSemValue value;
	if (node->body)
	{
		ILScope *oldscope = info->currentScope;
		info->currentScope = node->scope;
		value = ILNode_JSemAnalysis(node->body, info, &(node->body));
		info->currentScope = oldscope;
	}
	else
	{
		JavaSemSetRValue(value, ILType_Int32);
	}
	return value;
}

ILNode_Declaration_GatherStaticCtor(ILNode_ClassDefn),
ILNode_Declaration_GatherStaticCtor(ILNode_ScopeChange)
{
	if (node->body) 
	{
		JavaListGatherStaticCtor((ILNode_List *)node->body, ctor);
	}
}

%{

/*
 * Attach a constant value to a field.
 */
static void AddConstantValue(ILGenInfo *info, ILField *field,
							 ILEvalValue *evalValue)
{
	unsigned char constBuf[18];
	int constBufLen;
	int constElemType;
	ILConstant *constant;
	int posn, wlen;
	unsigned char *newStr;
	unsigned char *tempStr;

	/* Bail out if the field wasn't created properly */
	if(!field)
	{
		return;
	}

	switch(evalValue->valueType)
	{
		case ILMachineType_Boolean:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBufLen = 1;
			constElemType = IL_META_ELEMTYPE_BOOLEAN;
		}
		break;

		case ILMachineType_Int8:
		case ILMachineType_UInt8:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBufLen = 1;
			constElemType = IL_META_ELEMTYPE_I1;
		}
		break;

		case ILMachineType_Int16:
		case ILMachineType_UInt16:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i4Value >> 8);
			constBufLen = 2;
			constElemType = IL_META_ELEMTYPE_I2;
		}
		break;

		case ILMachineType_Char:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i4Value >> 8);
			constBufLen = 2;
			constElemType = IL_META_ELEMTYPE_CHAR;
		}
		break;

		case ILMachineType_Int32:
		case ILMachineType_UInt32:
		case ILMachineType_NativeInt:
		case ILMachineType_NativeUInt:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i4Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i4Value >> 8);
			constBuf[2] =
				(unsigned char)(evalValue->un.i4Value >> 16);
			constBuf[3] =
				(unsigned char)(evalValue->un.i4Value >> 24);
			constBufLen = 4;
			constElemType = IL_META_ELEMTYPE_I4;
		}
		break;

		case ILMachineType_Int64:
		case ILMachineType_UInt64:
		{
			constBuf[0] = (unsigned char)(evalValue->un.i8Value);
			constBuf[1] =
				(unsigned char)(evalValue->un.i8Value >> 8);
			constBuf[2] =
				(unsigned char)(evalValue->un.i8Value >> 16);
			constBuf[3] =
				(unsigned char)(evalValue->un.i8Value >> 24);
			constBuf[4] =
				(unsigned char)(evalValue->un.i8Value >> 32);
			constBuf[5] =
				(unsigned char)(evalValue->un.i8Value >> 40);
			constBuf[6] =
				(unsigned char)(evalValue->un.i8Value >> 48);
			constBuf[7] =
				(unsigned char)(evalValue->un.i8Value >> 56);
			constBufLen = 8;
			constElemType = IL_META_ELEMTYPE_I8;
		}
		break;

		case ILMachineType_Float32:
		{
			IL_WRITE_FLOAT(constBuf, evalValue->un.r4Value);
			constBufLen = 4;
			constElemType = IL_META_ELEMTYPE_R4;
		}
		break;

		case ILMachineType_Float64:
		case ILMachineType_NativeFloat:
		{
			IL_WRITE_DOUBLE(constBuf, evalValue->un.r8Value);
			constBufLen = 8;
			constElemType = IL_META_ELEMTYPE_R8;
		}
		break;

		case ILMachineType_String:
		{
			/* Detect "null" string constants specially */
			if(!(evalValue->un.strValue.str))
			{
				constBuf[0] = 0;
				constBuf[1] = 0;
				constBuf[2] = 0;
				constBuf[3] = 0;
				constBufLen = 4;
				constElemType = IL_META_ELEMTYPE_CLASS;
				break;
			}

			/* Determine the length of string in UTF-16 characters */
			posn = 0;
			wlen = 0;
			while(posn < evalValue->un.strValue.len)
			{
				wlen += ILUTF16WriteChar
					(0, ILUTF8ReadChar(evalValue->un.strValue.str,
									   evalValue->un.strValue.len, &posn));
			}

			/* Allocate temporary storage for the UTF-16 version */
			newStr = (unsigned char *)ILMalloc(wlen * 2 + 1);
			if(!newStr)
			{
				CCOutOfMemory();
			}

			/* Convert the string from UTF-8 into UTF-16 */
			posn = 0;
			tempStr = newStr;
			while(posn < evalValue->un.strValue.len)
			{
				tempStr += ILUTF16WriteCharAsBytes
					(tempStr, ILUTF8ReadChar
						(evalValue->un.strValue.str,
					     evalValue->un.strValue.len, &posn));
			}

			/* Attach the constant to the field */
			constant = ILConstantCreate(info->image, 0, (ILProgramItem *)field,
										IL_META_ELEMTYPE_STRING);
			if(!constant)
			{
				CCOutOfMemory();
			}
			if(!ILConstantSetValue(constant, newStr, wlen * 2))
			{
				CCOutOfMemory();
			}
			ILFree(newStr);
			return;
		}
		break;

		case ILMachineType_ObjectRef:
		{
			/* This is the "null" constant */
			constBuf[0] = 0;
			constBuf[1] = 0;
			constBuf[2] = 0;
			constBuf[3] = 0;
			constBufLen = 4;
			constElemType = IL_META_ELEMTYPE_CLASS;
		}
		break;

		default:
		{
			constBuf[0] = 0;
			constBufLen = 1;
			constElemType = IL_META_ELEMTYPE_I1;
		}
		break;
	}
	constant = ILConstantCreate(info->image, 0, (ILProgramItem *)field,
								constElemType);
	if(!constant)
	{
		CCOutOfMemory();
	}
	if(!ILConstantSetValue(constant, constBuf, constBufLen))
	{
		CCOutOfMemory();
	}
}

void JavaAddInitCtor(ILGenInfo *info, ILNode *stmt)
{
	ILNode_ClassDefn *defn = (ILNode_ClassDefn *)(info->currentClass);
	ILNode *bodyList;
	if(defn && stmt)
	{
		/* Construct the method declaration for ".init" if necessary.
		   Note: the ".init" method is a pseudo method to collect up
		   all non-static field initializers.  It isn't output into
		   the final program.  Instead, its body is expanded inline
		   into each constructor that requires field initialization */
		if(!(defn->initCtorsMethod))
		{
			ILMethod *methodInfo;
			ILType *signature;
			bodyList = ILNode_Compound_create();
			defn->initCtorsMethod =
				ILNode_MethodDeclaration_create
					(0, IL_META_METHODDEF_PRIVATE |
						IL_META_METHODDEF_HIDE_BY_SIG,
					 0 /* void */,
					 ILQualIdentSimple(ILInternString(".init", 5).string),
					 0 /* no parameters */,
					 ILNode_NewScope_create(bodyList));
			methodInfo = ILMethodCreate(defn->classInfo, 0, ".init",
										IL_META_METHODDEF_PRIVATE |
										IL_META_METHODDEF_HIDE_BY_SIG);
			if(!methodInfo)
			{
				CCOutOfMemory();
			}
			ILMethodSetCallConv(methodInfo, IL_META_CALLCONV_HASTHIS);
			signature = ILTypeCreateMethod(info->context, ILType_Void);
			if(!signature)
			{
				CCOutOfMemory();
			}
			ILTypeSetCallConv(signature, IL_META_CALLCONV_HASTHIS);
			ILMemberSetSignature((ILMember *)methodInfo, signature);
			((ILNode_MethodDeclaration *)(defn->initCtorsMethod))
					->methodInfo = methodInfo;
		}
		else
		{
			bodyList = ((ILNode_MethodDeclaration *)(defn->initCtorsMethod))
							->body;
			bodyList = ((ILNode_NewScope *)bodyList)->stmt;
		}

		/* Wrap the statement in a scope and add it to the body */
		ILNode_List_Add(bodyList, ILNode_NewScope_create(stmt));
	}
}

%}

/*
 * Perform semantic analysis for field declaration.
 */
ILNode_JSemAnalysis(ILNode_FieldDeclaration)
{
	ILNode_ListIter iterator;
	ILNode *decl;

	/* Verify the initializers */
	ILNode_ListIter_Init(&iterator, node->fieldDeclarators);
	while((decl = ILNode_ListIter_Next(&iterator)) != 0)
	{
		ILNode_JSemAnalysis(decl, info, &decl);
	}

	/* Fields don't really have a semantic value, so return the default */
	return JavaSemValueDefault;
}

ILNode_Declaration_GatherStaticCtor(ILNode_FieldDeclaration)
{
	if (node->fieldDeclarators) 
	{
		return JavaListGatherStaticCtor
							((ILNode_List *)node->fieldDeclarators, ctor);
	}
}

ILNode_JSemAnalysis(ILNode_FieldDeclarator)
{
	JavaSemValue value;
	ILEvalValue evalValue;
	ILNode *savedMethod;
	ILNode *initializer;

	savedMethod=info->currentMethod;

	/* Determine if we have already visited this node */
	if(node->visited == ILVisitMode_Processing)
	{
		CCErrorOnLine(yygetfilename(node), yygetlinenum(node),
					  "circularity detected in field definition");
		return JavaSemValueDefault;
	}
	else if(node->visited == ILVisitMode_Done)
	{
		return JavaSemValueDefault;
	}
	node->visited = ILVisitMode_Processing;

	/* Skip the field if no initializer or ILField block */
	if(!(node->initializer) || !(node->fieldInfo))
	{
		goto done;
	}
	
	info->currentMethod=NULL;

	/* Non-static fields are initialized differently */
	if(node->owner && (node->owner->modifiers & IL_META_FIELDDEF_STATIC) == 0)
	{
		initializer = ILNode_Assign_create(node->name, node->initializer);
		yysetfilename(initializer,yygetfilename(node));
		yysetlinenum(initializer,yygetlinenum(node));
		
		JavaAddInitCtor(info, initializer);
		goto done;
	}

	/* If this is a constant, then evaluate the value */
	if(node->owner && (node->owner->modifiers & IL_META_FIELDDEF_LITERAL) != 0)
	{
		/* Perform semantic analysis on the initializer value */
		value = ILNode_JSemAnalysis(node->initializer, info,
								   &(node->initializer));
		if(!JavaSemIsValue(value))
		{
			CCErrorOnLine(yygetfilename(node->initializer),
						  yygetlinenum(node->initializer),
						  "initializer is not a value");
			goto done;
		}

		/* Make sure that the value is compatible with the field's type */
		if(!ILCoerce(info, node->initializer, &(node->initializer),
					 JavaSemGetType(value), ILField_Type(node->fieldInfo),1))
		{
			CCErrorOnLine(yygetfilename(node->initializer),
						  yygetlinenum(node->initializer),
			  			  "incompatible types in initialization: "
			  					"no conversion from `%s' to `%s'",
			  			  JavaTypeToName(JavaSemGetType(value)),
						  JavaTypeToName(ILField_Type(node->fieldInfo)));
			goto done;
		}

		/* Check that the literal value is actually constant */
		if(!ILNode_EvalConst(node->initializer, info, &evalValue) ||
		   !ILGenCastConst(info, &evalValue, evalValue.valueType,
                   ILTypeToMachineType(ILField_Type(node->fieldInfo))))
		{
			CCErrorOnLine(yygetfilename(node->initializer),
						  yygetlinenum(node->initializer),
						  "initializer is not constant");
			goto done;
		}

		/* Record the constant value so the compiler can pick
		  it up when the binary form of the code is reloaded */
		AddConstantValue(info, node->fieldInfo, &evalValue);
		goto done;
	}

	/* Add a statement to the static constructor to initialize the field */
	/*	JavaAddStaticCtor(info,  
	                 ILNode_Assign_create(node->name, node->initializer)); */

	initializer=ILNode_Assign_create(node->name, node->initializer);
	yysetfilename(initializer,yygetfilename(node));
	yysetlinenum(initializer,yygetlinenum(node));

	node->staticCtor = ILNode_NewScope_create(initializer);

done:
	/* Mark the node as done and return */
	info->currentMethod=savedMethod;
	node->visited = ILVisitMode_Done;
	return JavaSemValueDefault;
}

ILNode_Declaration_GatherStaticCtor(ILNode_FieldDeclarator)
{
	ILNode_List_Add(ctor, node->staticCtor);
}

ILNode_Declaration_GatherStaticCtor(ILNode_EventDeclaration),
ILNode_Declaration_GatherStaticCtor(ILNode_EventDeclarator),
ILNode_Declaration_GatherStaticCtor(ILNode_MethodDeclaration),
ILNode_Declaration_GatherStaticCtor(ILNode_PropertyDeclaration),
ILNode_Declaration_GatherStaticCtor(ILNode_EnumMemberDeclaration),
ILNode_Declaration_GatherStaticCtor(ILNode_DelegateMemberDeclaration),
ILNode_Declaration_GatherStaticCtor(ILNode_FormalParameter),
ILNode_Declaration_GatherStaticCtor(ILNode_AttributeTree),
ILNode_Declaration_GatherStaticCtor(ILNode_AttributeSection),
ILNode_Declaration_GatherStaticCtor(ILNode_Attribute),
ILNode_Declaration_GatherStaticCtor(ILNode_AttrArgs),
ILNode_Declaration_GatherStaticCtor(ILNode_NamedArg),
ILNode_Declaration_GatherStaticCtor(ILNode_ProxyDeclaration)
{
	return;
}

