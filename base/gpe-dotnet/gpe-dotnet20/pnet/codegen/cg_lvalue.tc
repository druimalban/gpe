%output "cg_lvalue.c"

%{
/*
 * cg_lvalue.tc - Identifier and l-value nodes.
 *
 * Copyright (C) 2001  Southern Storm Software, Pty Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <codegen/cg_nodes.h>

%}

/*
 * Stub out identifier operations.  Identifier nodes must
 * be replaced with real l-value nodes prior to code generation.
 */
ILNode_GetType(ILNode_Identifier),
ILNode_GetType(ILNode_QualIdent),
ILNode_GenValue(ILNode_Identifier),
ILNode_GenValue(ILNode_QualIdent)
{
	return ILMachineType_Void;
}
ILNode_GenDiscard(ILNode_Identifier),
ILNode_GenDiscard(ILNode_QualIdent),
ILNode_GenThen(ILNode_Identifier),
ILNode_GenThen(ILNode_QualIdent),
ILNode_GenElse(ILNode_Identifier),
ILNode_GenElse(ILNode_QualIdent)
{
}
ILNode_EvalConst(ILNode_Identifier),
ILNode_EvalConst(ILNode_QualIdent)
{
	return 0;
}

/*
 * Get the type of a local or argument variable.
 */
ILNode_GetType(ILNode_LocalVar),
ILNode_GetType(ILNode_ArgumentVar)
{
	return node->machineType;
}

/*
 * Get the type of a by-reference argument variable.
 */
ILNode_GetType(ILNode_RefArgumentVar)
{
	return node->machineType;
}

/*
 * Get the type of a field access operator.
 */
ILNode_GetType(ILNode_MemberAccess),
ILNode_GetType(ILNode_BaseAccess),
ILNode_GetType(ILNode_BaseElement),
ILNode_GetType(ILNode_DerefField)
{
	return node->machineType;
}

/*
 * Get the type of a static or member field reference.
 */
ILNode_GetType(ILNode_StaticField),
ILNode_GetType(ILNode_MemberField)
{
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Get the type of a static or member property reference.
 */
ILNode_GetType(ILNode_StaticProperty),
ILNode_GetType(ILNode_MemberProperty)
{
	ILType *signature = ILProperty_Signature(node->property);
	return ILTypeToMachineType(ILTypeGetReturn(signature));
}

/*
 * Get the type of an array access operation.
 */
ILNode_GetType(ILNode_ArrayAccess)
{
	return ILTypeToMachineType(node->elemType);
}

/*
 * Get the type of an indexer access operation.
 */
ILNode_GetType(ILNode_IndexerAccess)
{
	return node->machineType;
}

/*
 * Generate discard code for a local or argument variable.
 */
ILNode_GenDiscard(ILNode_LocalVar),
ILNode_GenDiscard(ILNode_ArgumentVar),
ILNode_GenDiscard(ILNode_RefArgumentVar)
{
	/* Nothing needs to be done here */
}

/*
 * Generate discard code for a member access operator.
 */
ILNode_GenDiscard(ILNode_MemberAccess)
{
	/* Evaluate the object expression for its side-effects */
	ILNode_GenDiscard(node->expr1, info);
}

/*
 * Generate discard code for a base access operator.
 */
ILNode_GenDiscard(ILNode_BaseAccess)
{
	/* Nothing needs to be done here */
}

/*
 * Generate discard code for a field dereference operator.
 */
ILNode_GenDiscard(ILNode_DerefField)
{
	/* Evaluate the object expression for its side-effects */
	ILNode_GenDiscard(node->expr1, info);
}

/*
 * Generate discard code for a static field or property reference.
 */
ILNode_GenDiscard(ILNode_StaticField),
ILNode_GenDiscard(ILNode_StaticProperty)
{
	/* Nothing to do here */
}

/*
 * Generate discard code for an array access node.
 */
ILNode_GenDiscard(ILNode_ArrayAccess)
{
	ILNode_GenDiscard(node->array, info);
	ILNode_GenDiscard(node->indices, info);
}

/*
 * Generate discard code for an indexer access node.
 */
ILNode_GenDiscard(ILNode_IndexerAccess)
{
	ILNode_GenDiscard(node->object, info);
	ILNode_GenDiscard(node->indices, info);
}

/*
 * Generate value code for a local variable.
 */
ILNode_GenValue(ILNode_LocalVar)
{
	ILGenLoadLocal(info, node->index);
	ILGenAdjust(info, 1);
	return node->machineType;
}

/*
 * Generate value code for an argument variable.
 */
ILNode_GenValue(ILNode_ArgumentVar)
{
	ILGenLoadArg(info, node->index);
	ILGenAdjust(info, 1);
	return node->machineType;
}

/*
 * Generate value code for a by-reference argument variable.
 */
ILNode_GenValue(ILNode_RefArgumentVar)
{
	/* Load the reference onto the stack */
	ILGenLoadArg(info, node->index);
	ILGenAdjust(info, 1);

	/* Dereference the pointer to get the actual value */
	ILGenLoadManaged(info, node->machineType, node->type);

	/* Return the value's type to the caller */
	return node->machineType;
}

/*
 * Generate value code for a member access operator.
 */
ILNode_GenValue(ILNode_MemberAccess)
{
	/* Pseudo node - replaced during semantic analysis */
	return node->machineType;
}

/*
 * Generate value code for a base access operator.
 */
ILNode_GenValue(ILNode_BaseAccess)
{
 	ILClass *classInfo = ((ILNode_ClassDefn *)(info->currentClass))
 									->classInfo;
 	ILType *type =ILClassToType(ILClass_Parent(classInfo));
 	ILMachineType machineType;
 
 	/* Do we need to unpack a value type instance? */
 	if(ILTypeIsValue(type))
 	{
 		/* Push the managed pointer in "this" onto the stack */
 		ILGenSimple(info, IL_OP_LDARG_0);
 		ILGenAdjust(info, 1);
 
 		/* Load the value from the managed pointer */
 		machineType = ILTypeToMachineType(type);
 		ILGenLoadManaged(info, machineType, type);
 		return machineType;
 	}
 	else
 	{
 		/* We assume that "this" is an object reference in argument 0 */
 		ILGenSimple(info, IL_OP_LDARG_0);
 		ILGenAdjust(info, 1);
 		return ILMachineType_ObjectRef;
 	}
	return node->machineType;
}

/*
 * Generate value code for a base element operator.
 */
ILNode_GenValue(ILNode_BaseElement)
{
	/* Should be handled by IndexerAccess */
	return node->machineType;
}

/*
 * Generate value code for a field dereference operator.
 */
ILNode_GenValue(ILNode_DerefField)
{
	ILNode_GenValue(node->expr1, info);
	ILGenFieldRef(info, IL_OP_LDFLD, node->field);
	return node->machineType;
}

/*
 * Generate value code for a static field reference.
 */
ILNode_GenValue(ILNode_StaticField)
{
	ILGenFieldRef(info, IL_OP_LDSFLD, node->field);
	ILGenAdjust(info, 1);
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Generate value code for a member field reference.
 */
ILNode_GenValue(ILNode_MemberField)
{
	unsigned tempVar = ILGenPrepareForThisAccess
		(info, node->expr, ILField_Owner(node->field), 1);
	ILGenFieldRef(info, IL_OP_LDFLD, node->field);
	ILGenFreeThisVar(info, tempVar);
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Generate value code for a static property reference.
 */
ILNode_GenValue(ILNode_StaticProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILGenCallMethod(info, getter);
	ILGenAdjust(info, 1);
	return ILTypeToMachineType(ILTypeGetReturn(signature));
}

/*
 * Generate value code for a member property reference.
 */
ILNode_GenValue(ILNode_MemberProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	unsigned tempVar = ILGenPrepareForThisAccess
		(info, node->expr, ILProperty_Owner(node->property), 0);
	if(node->baseCall)
	{
		ILGenCallByMethod(info, getter);
	}
	else
	{
		ILGenCallMethod(info,getter);
	}
	ILGenFreeThisVar(info, tempVar);
	return ILTypeToMachineType(ILTypeGetReturn(signature));
}

%{

/*
 * Resolve and call a specific method for a multi-dimensional array.
 */
static void CallMArrayMethod(ILGenInfo *info, ILType *arrayType,
							 const char *name)
{
	ILClass *classInfo;
	ILMethod *method;

	/* Get the class information block for the array */
	classInfo = ILTypeToClass(info, arrayType);
	if(!classInfo)
	{
		return;
	}

	/* Find the method called "name" */
	if((method = (ILMethod *)ILClassNextMemberMatch
		(classInfo, (ILMember *)0, IL_META_MEMBERKIND_METHOD, name, 0)) != 0)
	{
		ILGenCallByMethod(info, method);
	}
}

%}

/*
 * Generate value code for an array access node.
 */
ILNode_GenValue(ILNode_ArrayAccess)
{
	ILMachineType machineType = ILTypeToMachineType(node->elemType);
	long saveStack;
	if(ILType_IsSimpleArray(node->arrayType))
	{
		/* We can use a simple "ldelem" instruction */
		ILNode_GenValue(node->array, info);
		ILNode_GenValue(node->indices, info);
		ILGenLoadArray(info, machineType, node->elemType);
		ILGenAdjust(info, -1);
	}
	else
	{
		/* We have to call a method to get the value */
		saveStack = info->stackHeight;
		ILNode_GenValue(node->array, info);
		ILNode_GenValue(node->indices, info);
		CallMArrayMethod(info, node->arrayType, "Get");
		info->stackHeight = saveStack + 1;
	}
	return machineType;
}

/*
 * Generate value code for an indexer access node.
 */
ILNode_GenValue(ILNode_IndexerAccess)
{
	long saveStack = info->stackHeight;
	unsigned thisTemp = ILGenPrepareForThisAccess
				(info, node->object, ILMethod_Owner(node->getMethod), 0);
						
	ILNode_GenValue(node->indices, info);
	if(node->baseAccess)
	{
		ILGenCallByMethod(info, node->getMethod);
	}
	else
	{
		ILGenCallMethod(info, node->getMethod);
	}
	info->stackHeight = saveStack + 1;

	/* Release the temporary local variable if necessary */
	ILGenFreeThisVar(info, thisTemp);
	return node->machineType;
}

/*
 * Prepare to store into a local or argument variable.
 */
ILNode_Prepare(ILNode_LocalVar),
ILNode_Prepare(ILNode_ArgumentVar)
{
	/* No preparation is needed for locals or arguments */
	return node->machineType;
}

/*
 * Prepare to store into a by-reference argument variable.
 */
ILNode_Prepare(ILNode_RefArgumentVar)
{
	/* Load the managed pointer onto the stack */
	ILGenLoadArg(info, node->index);
	ILGenAdjust(info, 1);
	return node->machineType;
}

/*
 * Prepare to store into a member access destination.
 */
ILNode_Prepare(ILNode_MemberAccess)
{
	/* Pseudo node - replaced during semantic analysis */
	return node->machineType;
}

/*
 * Prepare to store into a base access destination.
 */
ILNode_Prepare(ILNode_BaseAccess)
{
	/* Pseudo node - replaced during semantic analysis */
	return node->machineType;
}

/*
 * Prepare to store into a base element destination.
 */
ILNode_Prepare(ILNode_BaseElement)
{
	/* Should be handled by IndexerAccess */
	return node->machineType;
}

/*
 * Prepare to store into a field dereference destination.
 */
ILNode_Prepare(ILNode_DerefField)
{
	ILNode_GenValue(node->expr1, info);
	node->tempVar = IL_MAX_UINT32;
	return node->machineType;
}

/*
 * Prepare to store into a static field reference.
 */
ILNode_Prepare(ILNode_StaticField)
{
	/* Nothing needs to be done here */
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Prepare to store into a member field reference.
 */
ILNode_Prepare(ILNode_MemberField)
{
	ILGenPrepareForThisAccess(info, node->expr, ILField_Owner(node->field), 0);
	node->tempVar = IL_MAX_UINT32;
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Prepare to store into a static property reference.
 */
ILNode_Prepare(ILNode_StaticProperty)
{
	ILType *signature = ILProperty_Signature(node->property);
	return ILTypeToMachineType(ILTypeGetReturn(signature));
}

/*
 * Prepare to store into a member property reference.
 */
ILNode_Prepare(ILNode_MemberProperty)
{
	ILType *signature = ILProperty_Signature(node->property);
	node->tempVar = IL_MAX_UINT32;
	ILGenPrepareForThisAccess(info, node->expr,
							  ILProperty_Owner(node->property), 0);
	return ILTypeToMachineType(ILTypeGetReturn(signature));
}

/*
 * Prepare to store into an array access node.
 */
ILNode_Prepare(ILNode_ArrayAccess)
{
	ILMachineType machineType = ILTypeToMachineType(node->elemType);

	/* Save the current stack position, so "Store" knows what to pop */
	node->saveStack = info->stackHeight;

	/* Push the object and indices onto the stack */
	ILNode_GenValue(node->array, info);
	ILNode_GenValue(node->indices, info);

	/* If this is a simple array of managed values, then we need to
	   compute the address of the element for use in the store */
	if(ILType_IsSimpleArray(node->arrayType) &&
	   (machineType == ILMachineType_Decimal ||
	    machineType == ILMachineType_ManagedValue))
	{
		ILGenTypeToken(info, IL_OP_LDELEMA, node->elemType);
		ILGenAdjust(info, -1);
	}

	/* Return the element's machine type to the caller */
	return machineType;
}

/*
 * Prepare to store into an indexer access node.
 */
ILNode_Prepare(ILNode_IndexerAccess)
{
	node->saveStack = info->stackHeight;
	ILGenPrepareForThisAccess(info, node->object, 
					ILType_ToClass(node->objectType), 
					1);
	ILNode_GenValue(node->indices, info);
	return node->machineType;
}

/*
 * Get and prepare to store into a local variable.
 */
ILNode_GetAndPrepare(ILNode_LocalVar)
{
	ILGenLoadLocal(info, node->index);
	ILGenAdjust(info, 1);
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	return node->machineType;
}

/*
 * Get and prepare to store into an argument variable.
 */
ILNode_GetAndPrepare(ILNode_ArgumentVar)
{
	ILGenLoadArg(info, node->index);
	ILGenAdjust(info, 1);
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	return node->machineType;
}

/*
 * Get and prepare to store into a by-reference argument variable.
 */
ILNode_GetAndPrepare(ILNode_RefArgumentVar)
{
	/* Do we need to leave an extra copy of the value on the stack? */
	if(leave)
	{
		/* Load the managed pointer onto the stack */
		ILGenLoadArg(info, node->index);
		ILGenAdjust(info, 1);

		/* Get the current value of the variable for the left copy */
		ILGenLoadManaged(info, node->machineType, node->type);
	}

	/* Load the managed pointer onto the stack */
	ILGenLoadArg(info, node->index);
	ILGenAdjust(info, 1);

	/* Duplicate the pointer for a later store */
	ILGenSimple(info, IL_OP_DUP);
	ILGenAdjust(info, 1);

	/* Get the current value of the variable */
	ILGenLoadManaged(info, node->machineType, node->type);

	/* Return the value's type to the caller */
	return node->machineType;
}

/*
 * Get and prepare to store into a member access destination.
 */
ILNode_GetAndPrepare(ILNode_MemberAccess)
{
	/* Pseudo node - replaced during semantic analysis */
	return node->machineType;
}

/*
 * Get and prepare to store into a base access destination.
 */
ILNode_GetAndPrepare(ILNode_BaseAccess)
{
	/* Pseudo node - replaced during semantic analysis */
	return node->machineType;
}

/*
 * Get and prepare to store into a base element destination.
 */
ILNode_GetAndPrepare(ILNode_BaseElement)
{
	/* Should be handled by IndexerAccess */
	return node->machineType;
}

/*
 * Get and prepare to store into a field dereference destination.
 */
ILNode_GetAndPrepare(ILNode_DerefField)
{
	ILNode_GenValue(node->expr1, info);
	if(leave)
	{
		/* Duplicate the pointer reference and get the current value */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenFieldRef(info, IL_OP_LDFLD, node->field);

		/* Store the current value into a temporary local */
		node->tempVar = ILGenTempTypedVar(info, ILField_Type(node->field));
		ILGenSimple(info, IL_OP_DUP);
		ILGenStoreLocal(info, node->tempVar);
		ILGenExtend(info, 1);
	}
	else
	{
		/* Duplicate the pointer reference for the later store */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);

		/* Load the current value from the field */
		ILGenFieldRef(info, IL_OP_LDFLD, node->field);

		/* We don't need to reload a previous value in "Store" */
		node->tempVar = IL_MAX_UINT32;
	}
	return node->machineType;
}

/*
 * Get and prepare to store into a static field reference.
 */
ILNode_GetAndPrepare(ILNode_StaticField)
{
	ILGenFieldRef(info, IL_OP_LDSFLD, node->field);
	ILGenAdjust(info, 1);
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Get and prepare to store into a member field reference.
 */
ILNode_GetAndPrepare(ILNode_MemberField)
{
	/* Generate the object reference */
	ILGenPrepareForThisAccess(info, node->expr, ILField_Owner(node->field), 0);

	/* Do we need to leave the current value on the stack for later? */
	if(leave)
	{
		/* Duplicate the object reference and get the current value */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenFieldRef(info, IL_OP_LDFLD, node->field);

		/* Store the current value into a temporary local */
		node->tempVar = ILGenTempTypedVar(info, ILField_Type(node->field));
		ILGenSimple(info, IL_OP_DUP);
		ILGenStoreLocal(info, node->tempVar);
		ILGenExtend(info, 1);
	}
	else
	{
		/* Duplicate the object reference for the later store */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);

		/* Load the current value from the field */
		ILGenFieldRef(info, IL_OP_LDFLD, node->field);

		/* We don't need to reload a previous value in "Store" */
		node->tempVar = IL_MAX_UINT32;
	}
	return ILTypeToMachineType(ILField_Type(node->field));
}

/*
 * Get and prepare to store into a static property reference.
 */
ILNode_GetAndPrepare(ILNode_StaticProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILGenCallMethod(info, getter);
	ILGenAdjust(info, 1);
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	return ILTypeToMachineType(ILTypeGetReturn(signature));
}

/*
 * Get and prepare to store into a member property reference.
 */
ILNode_GetAndPrepare(ILNode_MemberProperty)
{
	ILMethod *getter = ILProperty_Getter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILType *propType = ILTypeGetReturn(signature);
	if(leave)
	{
		/* Generate the object reference */
		ILGenPrepareForThisAccess(info, node->expr,
								  ILProperty_Owner(node->property), 0);

		/* Duplicate it and get the current value */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		if(node->baseCall)
		{
			ILGenCallByMethod(info, getter);
		}
		else
		{
			ILGenCallMethod(info, getter);
		}

		/* Store the current value into a temporary local */
		node->tempVar = ILGenTempTypedVar(info, propType);
		ILGenSimple(info, IL_OP_DUP);
		ILGenStoreLocal(info, node->tempVar);
		ILGenExtend(info, 1);
	}
	else
	{
		/* Generate the object reference */
		ILGenPrepareForThisAccess(info, node->expr,
								  ILProperty_Owner(node->property), 0);

		/* Duplicate it for the later store */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);

		/* Load the current value from the property */
		if(node->baseCall)
		{
			ILGenCallByMethod(info, getter);
		}
		else
		{
			ILGenCallMethod(info, getter);
		}

		/* We don't need to reload a previous value in "Store" */
		node->tempVar = IL_MAX_UINT32;
	}
	return ILTypeToMachineType(propType);
}

/*
 * Get and prepare to store into an array access node.
 */
ILNode_GetAndPrepare(ILNode_ArrayAccess)
{
	ILMachineType machineType = ILTypeToMachineType(node->elemType);
	unsigned tempArrayVar;
	unsigned tempIndexVar;
	unsigned tempValueVar;
	unsigned *tempIndexVars;
	int rank, dim, posn;
	ILNode *indexNode;
	int isManagedValue;

	/* Save the current stack position so "Store" knows what to pop */
	node->saveStack = info->stackHeight;

	/* Determine if the element type is a managed value */
	isManagedValue = (machineType == ILMachineType_Decimal ||
					  machineType == ILMachineType_ManagedValue);

	/* Determine what kind of array we are dealing with */
	if(ILType_IsSimpleArray(node->arrayType))
	{
		/* We need some temporary variables to assist with
		   the duplication of the values */
		tempArrayVar = ILGenTempTypedVar(info, node->arrayType);
		tempIndexVar = ILGenTempTypedVar(info, ILType_Int32);

		/* Get the array reference and save it */
		ILNode_GenValue(node->array, info);
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempArrayVar);
		ILGenAdjust(info, -1);

		/* Get the index value and save it */
		ILNode_GenValue(node->indices, info);
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempIndexVar);
		ILGenAdjust(info, -1);

		/* Do we need to leave the current value on the stack? */
		if(leave)
		{
			/* Get the array element and save it */
			tempValueVar = ILGenTempTypedVar(info, node->elemType);
			ILGenLoadArray(info, machineType, node->elemType);
			ILGenSimple(info, IL_OP_DUP);
			ILGenStoreLocal(info, tempValueVar);
			ILGenAdjust(info, -1);

			/* Reload all saved values back onto the stack */
			ILGenLoadLocal(info, tempArrayVar);
			ILGenLoadLocal(info, tempIndexVar);
			ILGenAdjust(info, 2);
			if(isManagedValue)
			{
				/* When we do the store, we need an address on the stack */
				ILGenTypeToken(info, IL_OP_LDELEMA, node->elemType);
				ILGenAdjust(info, -1);
			}
			ILGenLoadLocal(info, tempValueVar);
			ILGenAdjust(info, 1);

			/* Account for the extra value that we will be leaving behind */
			++(node->saveStack);

			/* Release the extra temporary variable that we used */
			ILGenReleaseTempVar(info, tempValueVar);
		}
		else
		{
			/* Managed value stores use an address, not an object/index pair */
			if(isManagedValue)
			{
				ILGenTypeToken(info, IL_OP_LDELEMA, node->elemType);
				ILGenAdjust(info, -1);
			}

			/* Reload the values onto the stack and get the array element */
			ILGenLoadLocal(info, tempArrayVar);
			ILGenLoadLocal(info, tempIndexVar);
			ILGenAdjust(info, 2);
			ILGenLoadArray(info, machineType, node->elemType);
			ILGenAdjust(info, -1);
		}

		/* Release the temporary variables */
		ILGenReleaseTempVar(info, tempArrayVar);
		ILGenReleaseTempVar(info, tempIndexVar);
	}
	else
	{
		/* Get temporary variables for the array and the indices */
		tempArrayVar = ILGenTempTypedVar(info, node->arrayType);
		rank = ILTypeGetRank(node->arrayType);
		tempIndexVars = (unsigned *)ILMalloc(sizeof(unsigned) * rank);
		if(!tempIndexVars)
		{
			ILGenOutOfMemory(info);
		}
		for(dim = 0; dim < rank; ++dim)
		{
			tempIndexVars[dim] = ILGenTempTypedVar(info, ILType_Int32);
		}

		/* Get the array reference and save it */
		ILNode_GenValue(node->array, info);
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempArrayVar);
		ILGenAdjust(info, -1);

		/* Get the index values and save them */
		for(dim = 0; dim < rank; ++dim)
		{
			posn = rank - dim;
			indexNode = node->indices;
			while(posn > 1)
			{
				indexNode = ((ILNode_ArgList *)indexNode)->expr1;
				--posn;
			}
			if(yyisa(indexNode, ILNode_ArgList))
			{
				indexNode = ((ILNode_ArgList *)indexNode)->expr2;
			}
			ILNode_GenValue(indexNode, info);
			ILGenSimple(info, IL_OP_DUP);
			ILGenAdjust(info, 1);
			ILGenStoreLocal(info, tempIndexVars[dim]);
			ILGenAdjust(info, -1);
		}

		/* Do we need to leave the current value on the stack? */
		if(leave)
		{
			/* Get the array element and save it */
			tempValueVar = ILGenTempTypedVar(info, node->elemType);
			CallMArrayMethod(info, node->arrayType, "Get");
			ILGenAdjust(info, -rank);
			ILGenSimple(info, IL_OP_DUP);
			ILGenAdjust(info, 1);
			ILGenStoreLocal(info, tempValueVar);
			ILGenAdjust(info, -1);

			/* Reload all saved values back onto the stack */
			ILGenLoadLocal(info, tempArrayVar);
			ILGenAdjust(info, 1);
			for(dim = 0; dim < rank; ++dim)
			{
				ILGenLoadLocal(info, tempIndexVars[dim]);
				ILGenAdjust(info, 1);
			}
			ILGenLoadLocal(info, tempValueVar);
			ILGenAdjust(info, 1);

			/* Account for the extra value that we will be leaving behind */
			++(node->saveStack);

			/* Release the extra temporary variable that we used */
			ILGenReleaseTempVar(info, tempValueVar);
		}
		else
		{
			/* Reload the values onto the stack and get the array element */
			ILGenLoadLocal(info, tempArrayVar);
			ILGenAdjust(info, 1);
			for(dim = 0; dim < rank; ++dim)
			{
				ILGenLoadLocal(info, tempIndexVars[dim]);
				ILGenAdjust(info, 1);
			}
			CallMArrayMethod(info, node->arrayType, "Get");
			ILGenAdjust(info, -rank);
		}

		/* Release the temporary variables */
		ILGenReleaseTempVar(info, tempArrayVar);
		for(dim = 0; dim < rank; ++dim)
		{
			ILGenReleaseTempVar(info, tempIndexVars[dim]);
		}
		ILFree(tempIndexVars);
	}
	return machineType;
}

/*
 * Get and prepare to store into an indexer access node.
 */
ILNode_GetAndPrepare(ILNode_IndexerAccess)
{
	unsigned tempObjectVar;
	unsigned tempValueVar;
	unsigned *tempIndexVars;
	int numArgs, argNum, posn;
	ILNode *indexNode;
	ILType *signature;

	/* Save the current stack position so "Store" knows what to pop */
	node->saveStack = info->stackHeight;

	/* Get the signature for the "get" method, so that we know
	   what types to use to temporarily save the index values */
	signature = ILMethod_Signature(node->getMethod);

	/* Get temporary variables for the object and the indices */
	tempObjectVar = ILGenTempTypedVar(info, node->objectType);
	numArgs = 1;
	indexNode = node->indices;
	while(yyisa(indexNode, ILNode_ArgList))
	{
		++numArgs;
		indexNode = ((ILNode_ArgList *)indexNode)->expr1;
	}
	tempIndexVars = (unsigned *)ILMalloc(sizeof(unsigned) * numArgs);
	if(!tempIndexVars)
	{
		ILGenOutOfMemory(info);
	}
	for(argNum = 0; argNum < numArgs; ++argNum)
	{
		tempIndexVars[argNum] = ILGenTempTypedVar
				(info, ILTypeGetParam(signature, argNum + 1));
	}

	/* Get the object reference and save it */
	ILNode_GenValue(node->object, info);
	ILGenSimple(info, IL_OP_DUP);
	ILGenAdjust(info, 1);
	ILGenStoreLocal(info, tempObjectVar);
	ILGenAdjust(info, -1);

	/* Get the index values and save them */
	for(argNum = 0; argNum < numArgs; ++argNum)
	{
		posn = numArgs - argNum;
		indexNode = node->indices;
		while(posn > 1)
		{
			indexNode = ((ILNode_ArgList *)indexNode)->expr1;
			--posn;
		}
		if(yyisa(indexNode, ILNode_ArgList))
		{
			indexNode = ((ILNode_ArgList *)indexNode)->expr2;
		}
		ILNode_GenValue(indexNode, info);
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempIndexVars[argNum]);
		ILGenAdjust(info, -1);
	}

	/* Do we need to leave the current value on the stack? */
	if(leave)
	{
		/* Get the indexer element and save it */
		tempValueVar = ILGenTempTypedVar(info, node->elemType);
		if(node->baseAccess)
		{
			ILGenCallByMethod(info, node->getMethod);
		}
		else
		{
			ILGenCallMethod(info, node->getMethod);
		}
		ILGenAdjust(info, -numArgs);
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempValueVar);
		ILGenAdjust(info, -1);

		/* Reload all saved values back onto the stack */
		ILGenLoadLocal(info, tempObjectVar);
		ILGenAdjust(info, 1);
		for(argNum = 0; argNum < numArgs; ++argNum)
		{
			ILGenLoadLocal(info, tempIndexVars[argNum]);
			ILGenAdjust(info, 1);
		}
		ILGenLoadLocal(info, tempValueVar);
		ILGenAdjust(info, 1);

		/* Account for the extra value that we will be leaving behind */
		++(node->saveStack);

		/* Release the extra temporary variable that we used */
		ILGenReleaseTempVar(info, tempValueVar);
	}
	else
	{
		/* Reload the values onto the stack and get the indexer element */
		ILGenLoadLocal(info, tempObjectVar);
		ILGenAdjust(info, 1);
		for(argNum = 0; argNum < numArgs; ++argNum)
		{
			ILGenLoadLocal(info, tempIndexVars[argNum]);
			ILGenAdjust(info, 1);
		}
		if(node->baseAccess)
		{
			ILGenCallByMethod(info, node->getMethod);
		}
		else
		{
			ILGenCallMethod(info, node->getMethod);
		}
		ILGenAdjust(info, -numArgs);
	}

	/* Release the temporary variables */
	ILGenReleaseTempVar(info, tempObjectVar);
	for(argNum = 0; argNum < numArgs; ++argNum)
	{
		ILGenReleaseTempVar(info, tempIndexVars[argNum]);
	}
	ILFree(tempIndexVars);
	return node->machineType;
}

/*
 * Store into a local variable.
 */
ILNode_Store(ILNode_LocalVar)
{
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	ILGenStoreLocal(info, node->index);
	ILGenAdjust(info, -1);
}

/*
 * Store into an argument variable.
 */
ILNode_Store(ILNode_ArgumentVar)
{
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	ILGenStoreArg(info, node->index);
	ILGenAdjust(info, -1);
}

/*
 * Store into an by-reference argument variable.
 */
ILNode_Store(ILNode_RefArgumentVar)
{
	if(leave)
	{
		/* Allocate a temporary local to hold the "left" copy */
		unsigned tempVar = ILGenTempTypedVar(info, node->type);

		/* Duplicate the top-most value and store into the temporary local */
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempVar);
		ILGenAdjust(info, -1);

		/* Store the value into the managed pointer */
		ILGenStoreManaged(info, node->machineType, node->type);
		ILGenAdjust(info, -2);

		/* Re-push the temporary local */
		ILGenLoadLocal(info, tempVar);
		ILGenAdjust(info, 1);

		/* Release the temporary local, which we no longer require */
		ILGenReleaseTempVar(info, tempVar);
	}
	else
	{
		/* Store the value into the managed pointer */
		ILGenStoreManaged(info, node->machineType, node->type);
		ILGenAdjust(info, -2);
	}
}

/*
 * Store into a member access destination.
 */
ILNode_Store(ILNode_MemberAccess)
{
	/* Pseudo node - replaced during semantic analysis */
}

/*
 * Store into a base access destination.
 */
ILNode_Store(ILNode_BaseAccess)
{
	/* Should be handled by IndexerAccess */
}

/*
 * Store into a base element destination.
 */
ILNode_Store(ILNode_BaseElement)
{
	/* Should be handled by IndexerAccess */
}

/*
 * Store into a static field reference.
 */
ILNode_Store(ILNode_StaticField)
{
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	ILGenFieldRef(info, IL_OP_STSFLD, node->field);
	ILGenAdjust(info, -1);
}

/*
 * Store into a member field reference.
 */
ILNode_Store(ILNode_MemberField),
ILNode_Store(ILNode_DerefField)
{
	if(leave)
	{
		/* Copy the result into a temporary local */
		unsigned temp = ILGenTempTypedVar(info, ILField_Type(node->field));
		ILGenSimple(info, IL_OP_DUP);
		ILGenStoreLocal(info, temp);
		ILGenExtend(info, 1);

		/* Store the value into the field */
		ILGenFieldRef(info, IL_OP_STFLD, node->field);
		ILGenAdjust(info, -2);

		/* Do we need to restore a previous value to the stack top? */
		if(node->tempVar != IL_MAX_UINT32)
		{
			ILGenLoadLocal(info, node->tempVar);
			ILGenAdjust(info, 1);
			ILGenReleaseTempVar(info, node->tempVar);
		}

		/* Reload the contents of the temporary local */
		ILGenLoadLocal(info, temp);
		ILGenAdjust(info, 1);
		ILGenReleaseTempVar(info, temp);
	}
	else
	{
		/* Store the value into the field */
		ILGenFieldRef(info, IL_OP_STFLD, node->field);
		ILGenAdjust(info, -2);

		/* Do we need to restore a previous value to the stack top? */
		if(node->tempVar != IL_MAX_UINT32)
		{
			ILGenLoadLocal(info, node->tempVar);
			ILGenAdjust(info, 1);
			ILGenReleaseTempVar(info, node->tempVar);
		}
	}
}

/*
 * Store into a static property reference.
 */
ILNode_Store(ILNode_StaticProperty)
{
	ILMethod *setter = ILProperty_Setter(node->property);
	if(leave)
	{
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
	}
	ILGenCallMethod(info, setter);
	ILGenAdjust(info, -1);
}

/*
 * Store into a member property reference.
 */
ILNode_Store(ILNode_MemberProperty)
{
	ILMethod *setter = ILProperty_Setter(node->property);
	ILType *signature = ILProperty_Signature(node->property);
	ILType *propType = ILTypeGetReturn(signature);
	if(leave)
	{
		/* Copy the result into a temporary local */
		unsigned temp = ILGenTempTypedVar(info, propType);
		ILGenSimple(info, IL_OP_DUP);
		ILGenStoreLocal(info, temp);
		ILGenExtend(info, 1);
		if(node->baseCall)
		{
			ILGenCallByMethod(info,setter);
		}
		else
		{
			/* Store the value into the property */
			ILGenCallMethod(info, setter);
		}
		ILGenAdjust(info, -2);

		/* Do we need to restore a previous value to the stack top? */
		if(node->tempVar != IL_MAX_UINT32)
		{
			ILGenLoadLocal(info, node->tempVar);
			ILGenAdjust(info, 1);
			ILGenReleaseTempVar(info, node->tempVar);
		}

		/* Reload the contents of the temporary local */
		ILGenLoadLocal(info, temp);
		ILGenAdjust(info, 1);
		ILGenReleaseTempVar(info, temp);
	}
	else
	{
		/* Store the value into the property */
		if(node->baseCall)
		{
			ILGenCallByMethod(info, setter);
		}
		else
		{
			ILGenCallMethod(info, setter);
		}
		ILGenAdjust(info, -2);

		/* Do we need to restore a previous value to the stack top? */
		if(node->tempVar != IL_MAX_UINT32)
		{
			ILGenLoadLocal(info, node->tempVar);
			ILGenAdjust(info, 1);
			ILGenReleaseTempVar(info, node->tempVar);
		}
	}
}

/*
 * Store into an array access node.
 */
ILNode_Store(ILNode_ArrayAccess)
{
	ILMachineType machineType = ILTypeToMachineType(node->elemType);
	unsigned tempVar;

	/* If we need to leave the value on the stack, then temporarily
	   save it into a local variable */
	if(leave)
	{
		tempVar = ILGenTempTypedVar(info, node->elemType);
		ILGenSimple(info, IL_OP_DUP);
		ILGenStoreLocal(info, tempVar);
		ILGenExtend(info, 1);
	}
	else
	{
		tempVar = 0;
	}

	/* Store the value into the array */
	if(ILType_IsSimpleArray(node->arrayType))
	{
		/* We can use a simple "stelem" instruction */
		ILGenStoreArray(info, machineType, node->elemType);
	}
	else
	{
		/* We have to call a method to store the value */
		CallMArrayMethod(info, node->arrayType, "Set");
	}

	/* Reset the stack to its original position */
	info->stackHeight = node->saveStack;

	/* Push the left value back onto the stack if necessary */
	if(leave)
	{
		ILGenLoadLocal(info, tempVar);
		ILGenAdjust(info, 1);
		ILGenReleaseTempVar(info, tempVar);
	}
}

/*
 * Store into an indexer access node.
 */
ILNode_Store(ILNode_IndexerAccess)
{
	if(leave)
	{
		unsigned tempVar = ILGenTempTypedVar(info, node->elemType);
		ILGenSimple(info, IL_OP_DUP);
		ILGenAdjust(info, 1);
		ILGenStoreLocal(info, tempVar);
		ILGenAdjust(info, -1);
		if(node->baseAccess)
		{
			ILGenCallByMethod(info, node->setMethod);
		}
		else
		{
			ILGenCallMethod(info, node->setMethod);
		}
		info->stackHeight = node->saveStack;
		ILGenLoadLocal(info, tempVar);
		ILGenAdjust(info, 1);
		ILGenReleaseTempVar(info, tempVar);
	}
	else
	{
		if(node->baseAccess)
		{
			ILGenCallByMethod(info, node->setMethod);
		}
		else
		{
			ILGenCallMethod(info, node->setMethod);
		}
		info->stackHeight = node->saveStack;
	}
}

/*
 * Generate reference code for local variable nodes.
 */
ILNode_GenRef(ILNode_LocalVar)
{
	ILGenLoadLocalAddr(info, node->index);
	ILGenAdjust(info, 1);
}

/*
 * Generate reference code for argument nodes.
 */
ILNode_GenRef(ILNode_ArgumentVar)
{
	ILGenLoadArgAddr(info, node->index);
	ILGenAdjust(info, 1);
}

/*
 * Generate reference code for by-reference argument nodes.
 */
ILNode_GenRef(ILNode_RefArgumentVar)
{
	ILGenLoadArg(info, node->index);
	ILGenAdjust(info, 1);
}

/*
 * Generate reference code for static fields.
 */
ILNode_GenRef(ILNode_StaticField)
{
	ILGenFieldRef(info, IL_OP_LDSFLDA, node->field);
	ILGenAdjust(info, 1);
}

/*
 * Generate reference code for member fields.
 */
ILNode_GenRef(ILNode_MemberField)
{
	unsigned tempVar = ILGenPrepareForThisAccess
		(info, node->expr, ILField_Owner(node->field), 1);
	ILGenFieldRef(info, IL_OP_LDFLDA, node->field);
	ILGenFreeThisVar(info, tempVar);
}

/*
 * Generate reference code for a member access destination.
 */
ILNode_GenRef(ILNode_MemberAccess)
{
	/* Pseudo node - replaced during semantic analysis */
}

/*
 * Generate reference code for a base access destination.
 */
ILNode_GenRef(ILNode_BaseAccess)
{
	/* Pseudo node - replaced during semantic analysis */
}

/*
 * Generate reference code for a base element destination.
 */
ILNode_GenRef(ILNode_BaseElement)
{
	/* Should be handled by IndexerAccess */
}

/*
 * Generate reference code for a field dereference destination.
 */
ILNode_GenRef(ILNode_DerefField)
{
	ILNode_GenValue(node->expr1, info);
	ILGenFieldRef(info, IL_OP_LDFLDA, node->field);
}

/*
 * Generate reference code for an array access node.
 */
ILNode_GenRef(ILNode_ArrayAccess)
{
	long saveStack;
	if(ILType_IsSimpleArray(node->arrayType))
	{
		/* We can use the "ldelema" instruction */
		ILNode_GenValue(node->array, info);
		ILNode_GenValue(node->indices, info);
		ILGenTypeToken(info, IL_OP_LDELEMA, node->elemType);
		ILGenAdjust(info, -1);
	}
	else
	{
		/* We have to call a method to get the address */
		saveStack = info->stackHeight;
		ILNode_GenValue(node->array, info);
		ILNode_GenValue(node->indices, info);
		CallMArrayMethod(info, node->arrayType, "Address");
		info->stackHeight = saveStack + 1;
	}
}

/*
 * Declare operations that can be used to manage identifiers.
 */
%decls %end %{

/*
 * Create a simple identifier node.  "name" must be intern'ed.
 */
ILNode *ILQualIdentSimple(char *name);

/*
 * Create a two-name identifier node.  The names do not need
 * to be intern'ed.
 */
ILNode *ILQualIdentTwo(const char *name1, const char *name2);

/*
 * Convert a qualified identifier node into a full string name,
 * and intern the string.  Returns NULL if not an identifier node.
 * If "asmForm" is non-zero, then quote the name to put it into
 * a form suitable for assembly code.
 */
char *ILQualIdentName(ILNode *node, int asmForm);

/*
 *  Very similar to ILQualIdentName, but only recognizes
 *  MemberAccess and Identifier nodes.  Plus it doesn't care
 *  about assembly code.
 *
 *  Not sensible, but documented.  -JPS
 */
char *ILMemberAccessName(ILNode *node);

/*
 * Append two qualified identifier strings, with '.' between them.
 */
char *ILQualIdentAppend(char *name1, char *name2);

/*
 * Determine if a node is a qualified identifier.
 */
int ILIsQualIdent(ILNode *node);

%}

/*
 * Implement the identifier operations.
 */
%end %{

ILNode *ILQualIdentSimple(char *name)
{
	return ILNode_Identifier_create(name);
}

ILNode *ILQualIdentTwo(const char *name1, const char *name2)
{
	char *intern1 = ILInternString((char *)name1, -1).string;
	char *intern2 = ILInternString((char *)name2, -1).string;
	return ILNode_QualIdent_create(ILNode_Identifier_create(intern1),
								   ILNode_Identifier_create(intern2));
}

char *ILQualIdentName(ILNode *node, int asmForm)
{
	if(!node)
	{
		return 0;
	}
	else if(yykind(node) == yykindof(ILNode_Identifier))
	{
		/* Simple name */
		ILNode_Identifier *ident = (ILNode_Identifier *)node;
		if(asmForm && ident->name[0] >= 'a' && ident->name[0] <= 'z')
		{
			/* The name might clash with an assembler keyword
			   or instruction name, so we must quote it */
			ILIntString quote = ILInternString("'", 1);
			ILIntString name;
			name.string = ident->name;
			name.len = strlen(ident->name);
			return (ILInternAppendedString
						(quote, ILInternAppendedString(name, quote))).string;
		}
		return ident->name;
	}
	else if(yykind(node) == yykindof(ILNode_QualIdent))
	{
		/* Qualified name */
		ILNode_QualIdent *qident = (ILNode_QualIdent *)node;
		return ILQualIdentAppend(ILQualIdentName(qident->left, asmForm),
								 ILQualIdentName(qident->right, asmForm));
	}
	else
	{
		return 0;
	}
}

char *ILMemberAccessName(ILNode *node)
{
	if (!node) return 0;

	if(yykind(node) == yykindof(ILNode_Identifier))
	{
		return ((ILNode_Identifier *)node)->name;
	}
	else if(yykind(node) == yykindof(ILNode_MemberAccess))
	{
		/*  Member Access  */
		ILNode_MemberAccess *ma = (ILNode_MemberAccess *)node;
		return ILQualIdentAppend(ILMemberAccessName(ma->expr1),
								 ILMemberAccessName(ma->expr2));
	}
	else
	{
		return 0;
	}
}

char *ILQualIdentAppend(char *name1, char *name2)
{
	ILIntString str1;
	ILIntString str2;
	ILIntString str3;
	if(!name1 || *name1 == '\0' || !name2 || *name2 == '\0')
	{
		return 0;
	}
	str1.string = name1;
	str1.len = strlen(name1);
	str2.string = ".";
	str2.len = 1;
	str3.string = name2;
	str3.len = strlen(name2);
	return (ILInternAppendedString
				(str1, ILInternAppendedString(str2, str3))).string;
}

int ILIsQualIdent(ILNode *node)
{
	if(!node)
	{
		return 0;
	}
	if(yykind(node) == yykindof(ILNode_Identifier))
	{
		return 1;
	}
	else if(yykind(node) == yykindof(ILNode_QualIdent))
	{
		return ILIsQualIdent(((ILNode_QualIdent *)node)->left) &&
		       ILIsQualIdent(((ILNode_QualIdent *)node)->right);
	}
	else
	{
		return 0;
	}
}

%}
