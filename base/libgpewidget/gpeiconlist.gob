requires 2.0.0

%{
/*
  gpeiconlist - an icon list widget
  Copyright (C) 2002  Robert Mibus <mibus@handhelds.org>

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <gtk/gtk.h>
#include "gpe-iconlist.h"

#undef CHIT_CHAT

#ifdef CHIT_CHAT
#define MAYBE_PRINTF printf
#else
#define MAYBE_PRINTF(s, ...) do { } while (0)
#endif

#define LABEL_YMARGIN	8
#define LABEL_XMARGIN	8

#define COL_WIDTH 70

#define il_label_height(_x)	(GPE_ICONLIST (_x)->_priv->label_height)
#define il_icon_size(_x)	(GPE_ICONLIST (_x)->_priv->icon_size)
#define il_row_height(_x)	(il_icon_size (_x) + il_label_height (_x) + LABEL_YMARGIN)
#define il_col_width(_x)	(il_icon_size (_x) + (3 * LABEL_XMARGIN))

struct ILIcon
{
	char *title;
	char *icon;
	gpointer udata;
	GdkPixbuf *pb;
	GdkPixbuf *pb_scaled;
};

%}

class GPE:IconList from Gtk:Scrolled:Window {
	private GList *icons = NULL;
	private GdkPixbuf *bgpixbuf = NULL;
	private int rows = 1;
	private int cols = 1;
	private int mcol = -1;
	private int mrow = -1;
	private int popup_timeout = 0;
	private gboolean flag_embolden = TRUE;
	private guint icon_size = 48;
	private guint label_height = 0;

/* Signals */
	signal last NONE(POINTER)
	void clicked(self, gpointer udata);

	signal last NONE(POINTER)
	void show_popup(self, gpointer udata);

/* init and other gtkish methods */
	init (self)
	{
		GtkWidget *vp, *da;

		gtk_scrolled_window_set_hadjustment (GTK_SCROLLED_WINDOW(self), NULL);
		gtk_scrolled_window_set_vadjustment (GTK_SCROLLED_WINDOW(self), NULL);

		gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW(GTK_SCROLLED_WINDOW(self)),
						GTK_POLICY_NEVER, GTK_POLICY_AUTOMATIC);

		vp = gtk_viewport_new (NULL, NULL);
		gtk_container_add (GTK_CONTAINER(self), vp);

		da = gtk_drawing_area_new ();
		gtk_widget_add_events (GTK_WIDGET (da), GDK_BUTTON_PRESS_MASK |
				       GDK_BUTTON_RELEASE_MASK);
		gtk_signal_connect (GTK_OBJECT(da), "expose_event",
				    (GtkSignalFunc)gpe_iconlist__expose, NULL);
		gtk_signal_connect (GTK_OBJECT(da), "button_release_event",
				    GTK_SIGNAL_FUNC(gpe_iconlist__button_release), NULL);
		gtk_signal_connect (GTK_OBJECT(da), "button_press_event",
				    GTK_SIGNAL_FUNC(gpe_iconlist__button_press), NULL);
		gtk_container_add (GTK_CONTAINER(vp), da);

		gtk_object_set_data (GTK_OBJECT (self), "da", da);
		gtk_object_set_data (GTK_OBJECT (da), "il", self);
		gtk_object_set_data (GTK_OBJECT (da), "va", gtk_viewport_get_vadjustment(GTK_VIEWPORT(vp)));

		self->_priv->label_height = gpe_iconlist__title_height (self);

		gtk_widget_show_all (vp);
	}

	public GtkWidget *
	new (void)
	{
		return GTK_WIDGET(GET_NEW);
	}

/* Set the background */
	public void set_bg (GPE:IconList *self, char *bg)
	{
		if (self->_priv->bgpixbuf)
			gdk_pixbuf_unref (self->_priv->bgpixbuf);
		if (bg)
			self->_priv->bgpixbuf = gdk_pixbuf_new_from_file (bg, NULL);
		else
			self->_priv->bgpixbuf = NULL;
	}

	public void set_bg_pixmap (GPE::IconList *self, GdkPixbuf *bg)
	{
		if (self->_priv->bgpixbuf)
			gdk_pixbuf_unref (self->_priv->bgpixbuf);
		gdk_pixbuf_ref (bg);
		self->_priv->bgpixbuf = bg;
	}

/* Helper - max. height of a label */
	private gint _title_height (GPEIconList *widget) {
		PangoContext *pc;
		PangoLayout *pl;
		PangoRectangle pr;
		int label_height;

		MAYBE_PRINTF ("_title_height\n");
		/* Pango font rendering setup */
		if ((pc = gtk_widget_get_pango_context (GTK_WIDGET(widget))) == NULL)
			pc = gtk_widget_create_pango_context (GTK_WIDGET(widget));
		pl = pango_layout_new (pc);
		
		/* Find out how tall icon labels will be */
		pango_layout_set_text (pl, "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm\nQWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm", -1);
		pango_layout_get_pixel_extents  (pl, NULL, &pr);
		label_height = pr.height;

		g_object_unref (pl);

		return label_height;
	}

	private void _check_icon_size (GPEIconList *il, struct ILIcon *icon)
	{
		if (icon->pb) {
			guint h = gdk_pixbuf_get_height (icon->pb);
			if (h > il->_priv->icon_size + 1
			   || h < il->_priv->icon_size - 1) {
				double ratio = (double)il->_priv->icon_size / (double)h; 
				guint new_width = gdk_pixbuf_get_width (icon->pb) * ratio;
				icon->pb_scaled = gdk_pixbuf_scale_simple (icon->pb, new_width, il->_priv->icon_size, GDK_INTERP_BILINEAR);
			} else {
				gdk_pixbuf_ref (icon->pb);
				icon->pb_scaled = icon->pb;
			}
		}
	}

/* Expose handler */
	private gboolean _expose (GtkWidget *widget, GdkEventExpose *event, gpointer data)
	{
		GPEIconList *il;
		GList *icons;
		GdkPixbuf *dest;
		int row=0, col=0;
		GtkAdjustment *va;
		PangoContext *pc;
		PangoLayout *pl;
		int label_height;
		int i;

		MAYBE_PRINTF ("iconlist_expose (%d,%d) (%dx%d)\n", event->area.x, event->area.y, event->area.width, event->area.height);
		il = GPE_ICONLIST(gtk_object_get_data (GTK_OBJECT(widget), "il"));

		/* Pango font rendering setup */
		if ((pc = gtk_widget_get_pango_context (widget)) == NULL)
			pc = gtk_widget_create_pango_context (widget);
		pl = pango_layout_new (pc);
		pango_layout_set_width (pl, il_col_width (il) * PANGO_SCALE);
		pango_layout_set_alignment (pl, PANGO_ALIGN_CENTER);
		//pango_layout_set_wrap (pl, PANGO_WRAP_CHAR);

		label_height = il_label_height (il);

		/* Get the GtkAdjustment used for the vertical scrollbar
		   va->value is the current displacement of the view as compared to the widget */
		va = gtk_object_get_data (GTK_OBJECT (widget), "va");

		/* No idea ;-) */
		gdk_window_set_back_pixmap (widget->window, NULL, FALSE);

		/* Make a new pixbuf for rendering icons to */
		dest = gdk_pixbuf_new (GDK_COLORSPACE_RGB, FALSE, 8,
				       event->area.width, event->area.height);

		/* Whiten the background
		   -> for use with a transparent bg? cool... */
		gdk_pixbuf_fill (dest, 0xffffffff);

		/* Paint the background image, scaled */
/*
			gdk_pixbuf_composite (il->_priv->bgpixbuf, dest,
					      0, i, event->area.width, event->area.height,
					      -event->area.x, -event->area.y + i,
					      1,//(double) widget->allocation.width / gdk_pixbuf_get_width (il->_priv->bgpixbuf),
					      1,//(double) widget->allocation.height / gdk_pixbuf_get_height (il->_priv->bgpixbuf),
					      GDK_INTERP_BILINEAR, 255);
*/
		MAYBE_PRINTF ("bg:\n");
		if (il->_priv->bgpixbuf)
			for (i=0; i < il->_priv->rows * il_row_height (il); i += gdk_pixbuf_get_height(il->_priv->bgpixbuf)) {
				GdkRectangle r1, dst;
				r1.x = 0; r1.y = i;
				r1.width = gdk_pixbuf_get_width (il->_priv->bgpixbuf);
				r1.height = gdk_pixbuf_get_height (il->_priv->bgpixbuf);

				MAYBE_PRINTF ("placing bg image at (0,%d)\n", i);
				MAYBE_PRINTF ("of maximum height %d\n", il->_priv->rows * il_row_height (il));
				MAYBE_PRINTF ("image height = %d\n", gdk_pixbuf_get_height (il->_priv->bgpixbuf));
				if (gdk_rectangle_intersect (&r1, &(event->area), &dst)) {
					gdk_pixbuf_composite (il->_priv->bgpixbuf, dest,
							      dst.x-event->area.x,
							      dst.y-event->area.y,
							      dst.width, dst.height,
							      r1.x-event->area.x, r1.y-event->area.y,
							      1,
							      1,
							      GDK_INTERP_BILINEAR, 255);
				}
			}
		MAYBE_PRINTF (":done\n");

		MAYBE_PRINTF ("icons:\n");
		icons = il->_priv->icons;
		while (icons) {
			GdkRectangle r1, r2, dst;
			struct ILIcon *icon;
			GdkPixbuf *pixbuf=NULL;

			icon = icons->data;

			/* Compute & render the icon */
			r1.x=col * il_col_width (il);
			r1.y=row * il_row_height (il) + 5;
			r1.width = il_col_width (il);
			r1.height = il->_priv->icon_size;

			r2.x = event->area.x;
			r2.y = event->area.y;
			r2.width = event->area.width;
			r2.height = event->area.height;
	  
			if (gdk_rectangle_intersect (&r1, &r2, &dst)) {

				/* Get the icon from the cache if its there, if not put it there :) */
				if (icon->pb_scaled)
					pixbuf = icon->pb_scaled;
				else {
					if (icon->pb == NULL)
						icon->pb = gdk_pixbuf_new_from_file (icon->icon, NULL);
					gpe_iconlist__check_icon_size (il, icon);
					pixbuf = icon->pb_scaled;
				}

				if (pixbuf) {
					// adjust X position for actual size
					r1.width = gdk_pixbuf_get_width (pixbuf);
					r1.x=col * il_col_width (il) + (il_col_width (il) - r1.width) / 2;

					// recompute intersection: maybe nothing to do any more
					if (gdk_rectangle_intersect (&r1, &r2, &dst)) {
						gdk_pixbuf_composite (pixbuf, dest, // from, to

							      dst.x - event->area.x, //dest_x
							      dst.y - event->area.y,// + va->value, // dest_y
							      dst.width, dst.height, // dest_width, dest_height
							      r1.x - event->area.x, // offset_x
							      r1.y - event->area.y, // + va->value, // offset_y
							      1.0,
							      1.0,
							      GDK_INTERP_BILINEAR, // filtering
							      //(gpe_iconlist__contains (r1, il->_priv->mx, il->_priv->my)) ? 128 : 255); // forced whole-alpha
							      col == il->_priv->mcol && row == il->_priv->mrow ? 128 : 255);
					}
				}
			}

			if (++col == il->_priv->cols) {
				col = 0; row++;
			}

			icons = icons->next;
		}
		MAYBE_PRINTF (":done\n");

		MAYBE_PRINTF ("render:\n");
		/* Dump to drawingarea */
		gdk_pixbuf_render_to_drawable (dest, widget->window, widget->style->fg_gc[GTK_STATE_NORMAL],
					       0, 0, event->area.x, event->area.y,
					       event->area.width, event->area.height,
					       GDK_RGB_DITHER_NORMAL, event->area.x, event->area.y);
		MAYBE_PRINTF (":done\n");

		gdk_pixbuf_unref (dest);

		col = row = 0;

		MAYBE_PRINTF ("text:\n");
		icons = il->_priv->icons;
		while (icons) {
			GdkRectangle r1, r2, dst;
			struct ILIcon *icon;
			icon = icons->data;

			/* Compute & render the title */
			r1.x=col * il_col_width (il);
			r1.y=row * il_row_height (il) + il->_priv->icon_size + LABEL_YMARGIN;
			r1.width = il_col_width (il);
			r1.height = label_height;

			r2.x = event->area.x;
			r2.y = event->area.y;
			r2.width = event->area.width;
			r2.height = event->area.height;
	  
			if (gdk_rectangle_intersect (&r1, &r2, &dst)) {
				char *stxt; int slen;
				int selected=0;
				PangoRectangle pr;

				stxt=icon->title;
				slen = strlen (stxt);

				selected = (il->_priv->mrow == row && il->_priv->mcol == col);
				if (selected && il->_priv->flag_embolden) {
					char *newtxt;
					newtxt = g_strdup_printf ("<b>%s</b>", stxt);
					pango_layout_set_markup (pl, newtxt, -1);
					g_free (newtxt);
				} else
					pango_layout_set_text (pl, stxt, -1);

				pango_layout_get_pixel_extents  (pl, NULL, &pr);

				while ((pango_layout_get_line_count (pl) > 2 ||
					pr.width > il_col_width (il)) && slen>0) {
					char *newtxt;
					char *fmt;
					if (stxt[slen-2] == ' ')
						slen--;

					if (selected && il->_priv->flag_embolden)
						fmt = g_strdup_printf ("<b>%%.%ds...</b>", --slen);
					else
						fmt = g_strdup_printf ("%%.%ds...", --slen);

					newtxt = g_strdup_printf (fmt, stxt);
					g_free (fmt);

					if (selected)
						pango_layout_set_markup (pl, newtxt, -1);
					else
						pango_layout_set_text (pl, newtxt, -1);
					g_free (newtxt);

					pango_layout_get_pixel_extents  (pl, NULL, &pr);
				}

				gtk_paint_layout (widget->style, widget->window, GTK_WIDGET_STATE (widget),
						  FALSE, &dst,
						  widget, "detail?wtf?", r1.x, r1.y, pl);
			}

			if (++col == il->_priv->cols) {
				col = 0; row++;
			}
			icons = icons->next;
		}

		g_object_unref (pl);

		MAYBE_PRINTF ("done expose\n");
		return TRUE;
	}

	private void _recalc_size (self, GtkAllocation *allocation)
	{
		int count;

		if (allocation->width > 15 + il_col_width (self)) 
			self->_priv->cols = (allocation->width - 15) / il_col_width (self);
		else
			self->_priv->cols = 1;
		
		count = g_list_length (self->_priv->icons);
		
		self->_priv->rows = ((count+self->_priv->cols-1)/self->_priv->cols);

		gtk_drawing_area_size (
			GTK_DRAWING_AREA(gtk_object_get_data (GTK_OBJECT(self), "da")),
			allocation->width, self->_priv->rows * il_row_height (self) + 5);
	}

	private struct ILIcon *new_icon (char *title, char *icon, gpointer udata, GdkPixbuf *pb)
	{
		struct ILIcon *ret;
		ret = (struct ILIcon *) malloc (sizeof (struct ILIcon));
		ret->title = title;
		ret->icon = icon;
		ret->udata = udata;
		ret->pb = pb;
		ret->pb_scaled = NULL;
		return ret;
	}

	public void add_item (self, char *title, char *icon, gpointer udata)
	{
		self->_priv->icons = g_list_append (self->_priv->icons, gpe_iconlist_new_icon (title, icon, udata, NULL));
		gpe_iconlist__recalc_size (self, &GTK_WIDGET(self)->allocation);
	}

	public void add_item_pixbuf (self, char *title, GdkPixbuf *icon, gpointer udata)
	{
		struct ILIcon *i;
		gdk_pixbuf_ref (icon);
		i = gpe_iconlist_new_icon (title, NULL, udata, icon);
		self->_priv->icons = g_list_append (self->_priv->icons, i);
		gpe_iconlist__check_icon_size (self, i);
		gpe_iconlist__recalc_size (self, &GTK_WIDGET(self)->allocation);
	}

	public void set_embolden (self, gboolean yes)
	{
		self->_priv->flag_embolden = yes;
	}

	public void clear (self)
	{
		GList *iter;
		for (iter = self->_priv->icons; iter; iter = iter->next) {
			struct ILIcon *i = (struct ILIcon *)iter->data;
			if (i->pb)
				gdk_pixbuf_unref (i->pb);
			if (i->pb_scaled)
				gdk_pixbuf_unref (i->pb_scaled);
			free (i);
		}
		
		g_list_free (self->_priv->icons);
		self->_priv->icons = NULL;

		gpe_iconlist__recalc_size (self, &GTK_WIDGET(self)->allocation);
	}

	public void set_icon_size (self, guint size)
	{
		GList *iter;

		for (iter = self->_priv->icons; iter; iter = iter->next) {
			struct ILIcon *i = (struct ILIcon *)iter->data;
			if (i->pb_scaled)
				gdk_pixbuf_unref (i->pb_scaled);
			i->pb_scaled = NULL;
		}

		self->_priv->icon_size = size;

		gpe_iconlist__recalc_size (self, &GTK_WIDGET(self)->allocation);

		gtk_widget_draw (GTK_WIDGET (self), NULL);
	}

	override (Gtk:Widget)
	void
	size_allocate (Gtk:Widget *self, GtkAllocation *allocation)
	{
		GPEIconList *il;
		il = GPE_ICONLIST(self);

		MAYBE_PRINTF ("iconlist: size_allocate\n");

		if ((int)g_object_get_data (G_OBJECT(il), "size_x") == allocation->width &&
		    (int)g_object_get_data (G_OBJECT(il), "size_y") == allocation->height)
			return;

		MAYBE_PRINTF ("new size: %dx%d\n", allocation->width, allocation->height);

		g_object_set_data (G_OBJECT(il), "size_x", (gpointer)allocation->width);
		g_object_set_data (G_OBJECT(il), "size_y", (gpointer)allocation->height);
		
		gpe_iconlist__recalc_size (il, allocation);

		PARENT_HANDLER (self, allocation);
	}

	private void _get_rowcol (GPEIconList *widget, int x, int y, int *col, int *row) {
		*col = x / il_col_width (widget);
		*row = y / il_row_height (widget);
	}

	private void _refresh_containing (GPEIconList *widget, int col, int row) {
		int x, y;
		GtkWidget *w = GTK_WIDGET(gtk_object_get_data (GTK_OBJECT(widget), "da"));

		x=col * il_col_width (widget);
		y=row * il_row_height (widget);

		gtk_widget_queue_draw_area (w, x, y, il_col_width (widget), il_row_height (widget) + 5);
	}

	private struct ILIcon *_get_icon (GPEIconList *il, int col, int row) {
		int i;
		GList *icons;

		icons = il->_priv->icons;
		for (i=0;i<row*il->_priv->cols+col && icons;i++)
			icons = icons->next;

		return icons ? icons->data : NULL;

	}

	private void _cancel_popup (GPEIconList *il) {
		if (il->_priv->popup_timeout != 0) {
			gtk_timeout_remove (il->_priv->popup_timeout);
			il->_priv->popup_timeout = 0;
		}
	}

	private gint _button_release (GtkWidget *widget, GdkEventButton *event) {
		GPEIconList *il;
		int row, col;

		MAYBE_PRINTF ("button_release\n");

		il = GPE_ICONLIST(gtk_object_get_data (GTK_OBJECT(widget), "il"));

		gpe_iconlist__cancel_popup (il);

		gpe_iconlist__refresh_containing (il, il->_priv->mcol, il->_priv->mrow);

		gpe_iconlist__get_rowcol (il, event->x, event->y, &(col), &(row));
		if (col == il->_priv->mcol && row == il->_priv->mrow) {
			struct ILIcon *data;
			data = gpe_iconlist__get_icon(il, il->_priv->mcol, il->_priv->mrow);
			il->_priv->mcol = il->_priv->mrow = -1;
			if (data)
				gpe_iconlist_clicked (il, data->udata);
		} else
			il->_priv->mcol = il->_priv->mrow = -1;

		return TRUE;
	}

	private gint _popup (gpointer data) {
		GPEIconList *il = data;
		int row, col;

		row = il->_priv->mrow;
		col = il->_priv->mcol;

		gpe_iconlist_show_popup(il, gpe_iconlist__get_icon(il,col, row)->udata);

		return FALSE;
	}

	public void popup_removed (self) {
		int row, col;

		row = self->_priv->mrow;
		col = self->_priv->mcol;
		
		self->_priv->mcol = self->_priv->mrow = -1;

		gpe_iconlist__refresh_containing (self, col, row);
	}

	private gint _button_press (GtkWidget *widget, GdkEventButton *event, gpointer user_data) {
		GPEIconList *il;

		il = GPE_ICONLIST(gtk_object_get_data (GTK_OBJECT(widget), "il"));

		gpe_iconlist__get_rowcol (il, event->x, event->y, &(il->_priv->mcol), &(il->_priv->mrow));
		gpe_iconlist__refresh_containing (il, il->_priv->mcol, il->_priv->mrow);

		/* Register a popup if there is an icon under the cursor */
		if (gpe_iconlist__get_icon(il, il->_priv->mcol, il->_priv->mrow)) {
			il->_priv->popup_timeout = gtk_timeout_add (500, gpe_iconlist__popup, (gpointer)il);
		}

		return TRUE;
	}
}
