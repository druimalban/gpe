/* Generated by GOB (v2.0.7)   (do not edit directly) */

#include <glib.h>
#include <glib-object.h>
#ifndef __GPE_ICONLIST_H__
#define __GPE_ICONLIST_H__

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#warning Do not use GpeIconlist, use GpeIconListView instead.

/*
 * Type checking and casting macros
 */
#define GPE_TYPE_ICONLIST	(gpe_iconlist_get_type())
#define GPE_ICONLIST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), gpe_iconlist_get_type(), GPEIconList)
#define GPE_ICONLIST_CONST(obj)	G_TYPE_CHECK_INSTANCE_CAST((obj), gpe_iconlist_get_type(), GPEIconList const)
#define GPE_ICONLIST_CLASS(klass)	G_TYPE_CHECK_CLASS_CAST((klass), gpe_iconlist_get_type(), GPEIconListClass)
#define GPE_IS_ICONLIST(obj)	G_TYPE_CHECK_INSTANCE_TYPE((obj), gpe_iconlist_get_type ())

#define GPE_ICONLIST_GET_CLASS(obj)	G_TYPE_INSTANCE_GET_CLASS((obj), gpe_iconlist_get_type(), GPEIconListClass)

/* Private structure type */
typedef struct _GPEIconListPrivate GPEIconListPrivate;

/*
 * Main object structure
 */
#ifndef __TYPEDEF_GPE_ICONLIST__
#define __TYPEDEF_GPE_ICONLIST__
typedef struct _GPEIconList GPEIconList;
#endif
struct _GPEIconList {
	GtkScrolledWindow __parent__;
	/*< private >*/
	GPEIconListPrivate *_priv;
};

/*
 * Class definition
 */
typedef struct _GPEIconListClass GPEIconListClass;
struct _GPEIconListClass {
	GtkScrolledWindowClass __parent__;
	/*signal*/void (* clicked) (GPEIconList * self, gpointer udata);
	/*signal*/void (* show_popup) (GPEIconList * self, gpointer udata);
};


/*
 * Public methods
 */
GType	gpe_iconlist_get_type	(void);
void 	gpe_iconlist_clicked	(GPEIconList * self,
					gpointer udata);
void 	gpe_iconlist_show_popup	(GPEIconList * self,
					gpointer udata);
GtkWidget * 	gpe_iconlist_new	(void);
void 	gpe_iconlist_set_bg	(GPEIconList * self,
					char * bg);
void 	gpe_iconlist_set_bg_pixmap	(GPEIconList * self,
					GdkPixbuf * bg);
void 	gpe_iconlist_set_bg_color	(GPEIconList * self,
					guint32 color);
GObject * 	gpe_iconlist_add_item	(GPEIconList * self,
					char * title,
					char * icon,
					gpointer udata);
GObject * 	gpe_iconlist_add_item_pixbuf	(GPEIconList * self,
					char * title,
					GdkPixbuf * icon,
					gpointer udata);
void 	gpe_iconlist_remove_item	(GPEIconList * self,
					GObject * item);
void 	gpe_iconlist_set_embolden	(GPEIconList * self,
					gboolean yes);
void 	gpe_iconlist_set_show_title	(GPEIconList * self,
					gboolean yes);
void 	gpe_iconlist_set_icon_xmargin	(GPEIconList * self,
					guint margin);
void 	gpe_iconlist_clear	(GPEIconList * self);
void 	gpe_iconlist_set_icon_size	(GPEIconList * self,
					guint size);
void 	gpe_iconlist_popup_removed	(GPEIconList * self);

/*
 * Signal connection wrapper macros
 */
#if defined(__GNUC__) && !defined(__STRICT_ANSI__)
#define gpe_iconlist_connect__clicked(object,func,data)	g_signal_connect(GPE_ICONLIST(({GPEIconList *___object = (object); ___object; })),"clicked",(GCallback)({void (* ___clicked) (GPEIconList * self, gpointer udata, gpointer ___data ) = (func); ___clicked; }), (data))
#define gpe_iconlist_connect_after__clicked(object,func,data)	g_signal_connect_after(GPE_ICONLIST(({GPEIconList *___object = (object); ___object; })),"clicked",(GCallback)({void (* ___clicked) (GPEIconList * self, gpointer udata, gpointer ___data ) = (func); ___clicked; }), (data))
#define gpe_iconlist_connect_data__clicked(object,func,data,destroy_data,flags)	g_signal_connect_data(GPE_ICONLIST(({GPEIconList *___object = (object); ___object; })),"clicked",(GCallback)({void (* ___clicked) (GPEIconList * self, gpointer udata, gpointer ___data ) = (func); ___clicked; }), (data), (destroy_data), (GConnectFlags)(flags))
#define gpe_iconlist_connect__show_popup(object,func,data)	g_signal_connect(GPE_ICONLIST(({GPEIconList *___object = (object); ___object; })),"show_popup",(GCallback)({void (* ___show_popup) (GPEIconList * self, gpointer udata, gpointer ___data ) = (func); ___show_popup; }), (data))
#define gpe_iconlist_connect_after__show_popup(object,func,data)	g_signal_connect_after(GPE_ICONLIST(({GPEIconList *___object = (object); ___object; })),"show_popup",(GCallback)({void (* ___show_popup) (GPEIconList * self, gpointer udata, gpointer ___data ) = (func); ___show_popup; }), (data))
#define gpe_iconlist_connect_data__show_popup(object,func,data,destroy_data,flags)	g_signal_connect_data(GPE_ICONLIST(({GPEIconList *___object = (object); ___object; })),"show_popup",(GCallback)({void (* ___show_popup) (GPEIconList * self, gpointer udata, gpointer ___data ) = (func); ___show_popup; }), (data), (destroy_data), (GConnectFlags)(flags))
#else /* __GNUC__ && !__STRICT_ANSI__ */
#define gpe_iconlist_connect__clicked(object,func,data)	g_signal_connect(GPE_ICONLIST(object),"clicked",(GCallback)(func),(data))
#define gpe_iconlist_connect_after__clicked(object,func,data)	g_signal_connect_after(GPE_ICONLIST(object),"clicked",(GCallback)(func),(data))
#define gpe_iconlist_connect_data__clicked(object,func,data,destroy_data,flags)	g_signal_connect_data(GPE_ICONLIST(object),"clicked",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#define gpe_iconlist_connect__show_popup(object,func,data)	g_signal_connect(GPE_ICONLIST(object),"show_popup",(GCallback)(func),(data))
#define gpe_iconlist_connect_after__show_popup(object,func,data)	g_signal_connect_after(GPE_ICONLIST(object),"show_popup",(GCallback)(func),(data))
#define gpe_iconlist_connect_data__show_popup(object,func,data,destroy_data,flags)	g_signal_connect_data(GPE_ICONLIST(object),"show_popup",(GCallback)(func),(data),(destroy_data),(GConnectFlags)(flags))
#endif /* __GNUC__ && !__STRICT_ANSI__ */


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
