<chapter id="environment">
<title>Your Development Environment</title>
  <para>
    In the most cases you do not want to compile a complete GPE framework 
    manually, there are build systems like Openembedded[6] or T2[7] which do 
    this work for you. On many hardware platforms you can use binaries from 
    one of the embedded Linux distributions like e.g. Familiar[8]. The Familiar 
    binaries are expected to work fine on most ARM based platforms. There are 
    only a very few bits in GPE which have platform-dependent switches, so 
    there is usually no need to compile packages specific to a particular 
    platform.
  </para>
  <para>
    Currently we work on switching the build system from our own Makefiles 
    to Autotools the way to compile the components GPE consists of.
  </para>
<section>
  <title>Native Development</title>
  <para>
    The basic needs for GPE development are a PC running Linux (or a similar 
    UNIX-like operating system) and a X window system with compiler and some 
    libraries installed. GPE applications are basically just GTK applications 
    like many others. In this context GPE application development is quite 
    uncomplicated.
  </para>
  <para>
    What do i need to install?
  </para>
  
  <itemizedlist>
       <listitem><para>C Compiler</para></listitem>
       <listitem><para>make</para></listitem>
       <listitem><para>intltool</para></listitem>
       <listitem><para>Autotools (autoconf/automake)</para></listitem>
       <listitem><para>GTK2 and its development packages.</para></listitem>
       <listitem><para>SQLite and its development packages.</para></listitem>
       <listitem><para>GOB2 - the GTK object builder. (for older library revisions)</para></listitem>
       <listitem><para>DBUS</para></listitem>
  </itemizedlist>

  <para>
    For the compiler you usually want to use GCC which is included in most modern 
    operating system distributions. All versions >= 3.0 should work without 
    trouble. The GTK libraries will pull in some other libraries they depend on 
    (things like GDK, Pango, ATK, X11). To be sure all parts of GPE work properly 
    it is recommended to use GTK 2.6.0 or higher. SQLite is a small in-process 
    SQL database which is used by various GPE applications for data storage. 
    Currently GPE uses the typless 2.x versions of SQLite.
  </para>
  <para>
    More and more GPE bits require GNU autotools to build. Some old versions 
    of autotools are known to cause trouble. If you use autoconf >= 2.50 and 
    and automake >= 1.9 you should be safe.
  </para>
  <para>
    Apart from the basic libraries necessary for almost all GPE applications 
    some parts of GPE depend on other external tools and libraries. 
    Most important are BlueZ (for gpe-bluetooth), OpenOBEX (gpe-beam, 
    gpe-bluetooth), libmimedir (PIM applications), Cairo (gpe-appmgr, 
    gpe-bootsplash, libgpewidget if activated), libmatchbox (gpe-what, 
    gpe-mininet).
  </para>
</section>

<section>
<title>Target Binaries and Cross Compiling</title>
  <para>
    The major part of the potential target devices for GPE will not have an 
    Intel x86 compatible CPU which most developers usually use on their 
    development workstations. This and the fact that our typical target device
    has very limited harware capabilities are the reasons why we need special
    mechanisms to compile GPE libraries and applications to run on our target 
    devices. Depending on the situation and your personal preference there 
    are several methods to choose. We describe the most frequently used ones 
    here.
  </para>

<section>
<title>Prebuilt Toolchain</title>
  <para>
    For a simple and fast start crosscompiling a GPE application get a copy of 
    the prebuilt crosstoolchain for GPE from 
    <ulink url="http://handhelds.org/~florian/sdk">handhelds.org</ulink>.
    Currently this reference toolchain is built using the OpenEmbedded 
    build system. It is updated from time to time to supply newer compilers
    and updated libraries.
  </para>
  <para>
    These toolchains are limited to some extend. Both the architecture of the
    computer the toolchain runs on and the architecture of the target 
    system are fixed. Currently we have toochains wich run on Intel x86 based 
    PCs running Linux and systems using an IBM PowerPC CPU running Linux. 
    Both variants of toolchain create binaries for ARM CPU (StrongARM, Xscale, 
    OMAP) based devices which are used on most mobile devices like PDAs.
  </para>
  <para>
    To install the prebuilt toolchain you need to have root privileges on the
	PC you install it to. The installation itself is very easy: Change to the
	root ("/") directory and unpack the toolchain there:
	<screen>
      <prompt>$</prompt> <userinput>tar xpjf sdk-package-archive.tar.bz2</userinput>
    </screen>
  </para>
  <para>
    Using the toolchain is easy as long as the software supports being 
	crosscompiled properly. You need to have the compilers of the toolchain
	in your PATH environment. This is necessary to make sure all tools used 
	for compiling the software find all the executable binaries shipped with
	the toolchain. To achieve this run:
	<screen>
      <prompt>$</prompt> <userinput>export PATH=/usr/local/arm/oe/bin:$PATH</userinput>
    </screen>
	You can add this to your local .login or .basrc file to have this setting
	in every shell you open.	
  </para>
  <para>
    Before using the toolchain for compiling you need to set the PKG_CONFIG_PATH
	environment variable to tell the <command>pkgconfig</command> tool where 
	to find the correct information about the libraries shipped with the 
	toolchain. The environment variable needs to point to the pkgconfig of
	the toolchains library directory. Do this:
	<screen>
      <prompt>$</prompt> <userinput>export PKG_CONFIG_PATH=/usr/local/arm/oe/arm-linux/lib/pkgconfig/</userinput>
    </screen>
	You should <emphasis>not</emphasis> put this into .basrc, because you 
	won't be able to compile natively without changing PKG_CONFIG_PATH anymore.
	You are now ready to start building your first application for the ARM 
	architecture.
  </para>
  <para>
    <emphasis>Compiling an application</emphasis>
	with the toolchain is very easy as long as all dependent libraries are part
	of the toolchain and crosscompiling works properly with the piece of 
	software you intend to compile. The method to do this depends on the build
	tools which are used for this software. If the application is using 
	autotools you need to pass some parameters to <command>configure</command>
	to tell it to create makefiles for crosscompiling. These parameters are
	the target prefix of the toolchain (in our case "arm-linux") and the 
	destination prefix used on the target platform (usually "/usr"). Once 
	<command>configure</command> created the necessary output files you can
	call <command>make</command> to start compiling. In most cases you just 
	need to go to the source directory and run:
	<screen>
      <prompt>$</prompt> <userinput>./configure --host=arm-linux --prefix=/usr</userinput>
      <prompt>$</prompt> <userinput>make</userinput>
    </screen>
	Of course you can add additional parameters to <command>configure</command>
	to influence the build process according to your needs.
  </para>
  
  <note>
    <para>
    You can easily add software in the crosstoolchain or update existing ones.
	Compile and install it with <filename>/usr/local/arm/oe/arm-linux</filename>
	as PREFIX. If you update libraries using libtool it is a good idea to remove
	all <filename>*.la</filename> from 
	<filename>/usr/local/arm/oe/arm-linux/lib</filename>.
	</para>
  </note>
</section>

<section>
<title>Scratchbox</title>
  <para>
    <ulink url="http://www.scratchbox.org">Scratchbox</ulink> is a very powerful
	virtual development environment which is able to build binaries for a 
	different platform transparently and is even able to run these binaries
	in an emulated environment or by transfering them to a real device 
	transparently. Scratchbox is available as packages for several distributions. 
	For detailed information about installing Scratchbox refer to the Scratchbox
	project
	<ulink url="http://www.scratchbox.org/documentation/user/scratchbox-1.0/">
	documentation</ulink>.
  </para>
</section>

<section>
<title>Other Methods</title>
  <para>
    Apart from the described methods you can always build your own toolchain,  
    Debian crosstoolchain packages or use a User Mode Linux setup for 
    crosscompiling. For a detailed description how to do this please refer 
    to specialized documents.[ref]
  </para>
</section>

</section>

<section>
<title>GPE Websites and Resources</title>
  <para>
    After all these information about how to compile GPE it might be 
    interesting to know where to find GPE and information about it. 
	
	[sources archive, uploads, documentation, cvs, irc, mailinglist, cvstrac, gallery]
  </para>
</section>

<section>
<title>Exploring the CVS</title>
  <para>  </para>  
</section>

</chapter>
