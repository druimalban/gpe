
<!--#set var="addtitle" value="Developer documentation - libgpewidget"-->
<!--#set var="pagename" value="libgpewidget"-->
<!--#set var="author" value="Damien Tanner"-->
<!--#set var="authoremail" value="dctanner@handhelds.org"-->
<!--#include virtual="../includes/head.php"-->

<h1>Libgpewidget API Documentation</h1>
<p>
This document is intended as a detailed reference for the gui functions avalible in libgpewidget.
</p>
<p>
Copyright 2003 Damien Tannner
</p>
<hr>

<h2>Application initilisation</h2>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<code>gboolean gpe_application_init (int *argc, char **argv[]);</code>
</td></tr>
</table>
</p>
<p>
Before any operations are done in your <code>main</code> function, you should first call <code>gpe_application_init</code>.
This will set any locale varibles or such that are needed before any other libgpewidget functions are called. The <code>gtk_init</code> function is also called so there is no need for it to be called seperately.
</p>

<h2>Icon loading</h2>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<code>gboolean gpe_load_icons (struct gpe_icon *);</code>
</td></tr>
</table>
</p>
<p>
This function should be called after <code>gpe_application_init</code> to load the appropriate pixmaps needed for your application. Previously this function was also used to load pixmaps for GtkButtons, but recently <code>gpe_button_new_from_stock</code> has replaced this. So <code>gpe_load_icons</code> should only be used for loading specialty icons like window title icons.
</p>
<p>
The struct <code>gpe_icon</code> contains the data needed for gpe to be able to locate your icons. This structure should be defined out of your <code>main</code> function, prefferbly immediately after your <code>#include</code> calls.
<br>
An example of this structure is given below.
</p>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<pre>
struct gpe_icon my_icons[] = {
  { "pear", "/root/pear.png" },
  { "lemon", "my_lemon_image" },
  { "icon", PREFIX "/share/pixmaps/gpe-application.png" },
  {NULL, NULL}
};
</pre>
</td></tr>
</table>
</p>
<p>
As shown above, for each entry in the structure there are two arguments. The first argument is a custom name for the icon, and the second isthe filename of the icon. This can be either just the name of the image file (excluding prefix) that is located in the PREFIX/share/gpe/pixmaps/default directory, or a full path to the filename.<br>
It must also be noted that the structure must be end with a null entry.
</p>
<p>
To access these preloaded images in your code you should use the following function.
</p>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<code>GdkPixbuf *gpe_find_icon (const char *name);</code>
</td></tr>
</table>
</p>
<p>
This function will attempt to locate the preloaded image called 'name' and return it as a GdkPixbuf. If the image cannot be found or has not been mentioned in the gpe_icon structure, a graphical error box will be shown describing the error and terminating the application after its acknolagment.<br>
If a graphical error is unallowed or the application needs to stay alive in the event of an error (such as in a library), <code>gpe_find_icon</code>'s sister function <code>gpe_try_find_icon</code> can be used instead. Its prototype is shown below.
</p>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<code>GdkPixbuf *gpe_try_find_icon (const char *name, gchar **error);</code>
</td></tr>
</table>
</p>

<h2>Window titlebar icons</h2>
<p>
<img src="images/window_toolbar_icon.png">
</p>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<code>gpe_set_window_icon (GtkWidget *window, gchar *icon);</code>
</td></tr>
</table>
</p>
<p>
The above function is used to set the small icon displayed in an applications window manager title bar, although it's only shown if the current window manager's theme specifies.<br>
When calling this function the <code>icon</code> argument should be the name of a preloaded image (an example of this was shown in the section named 'Icon loading').
</p>

<h2>Stock button</h2>
<p>
Stock buttons are a standard set of commonly used buttons defined in GTK+. They're used mainly as a convenience instead of having to pack buttons manualy, but on cross platform enviorments they can come in alot more use. Libgpewidget contains its own function built apon <code>gtk_button_new_from_stock</code> for creating stock button, which will also resize and align the buttons appropriately for smaller screens. This function is aptly named <code>gpe_button_new_from_stock</code>.
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<code>GtkWidget *gpe_button_new_from_stock (const gchar *stock_id, int type);</code>
</td></tr>
</table>
</p>
<p>
When calling <code>gpe_button_new_from_stock</code>, <code>stock_id</code> should be the name of a gtk stock type e.g. <code>GTK_STOCK_NEW</code>, and <code>type</code> is the type of button to construct. There are three different types of gpe stock buttons
<table border="0">
<tr>
<td><code>GPE_BUTTON_TYPE_ICON</code></td>
<td><img src="images/stock_button_icon.png"></td>
</tr>
<tr>
<td><code>GPE_BUTTON_TYPE_LABEL</code></td>
<td><img src="images/stock_button_label.png"></td>
</tr>
<tr>
<td><code>GPE_BUTTON_TYPE_BOTH</code></td>
<td><img src="images/stock_button_both.png"></td>
</tr>
</table>
</p>

<h2>Toolbars</h2>
<p>
<img src="images/toolbar.png">
</p>
<p>
In GPE, toolbars should be an important part of every application. For users they offer quick and simple access to commonly used functions. Most standard GPE applications should only need one toolbar for the main window. Authough other more complicated applications may require more than one toolbar or possibly even a menubar.<br>
All GPE applications should try to follow the precedure defined in the example below. This ensures that the applications have a similar look and feel that benifits the user.
</p>
<p>
<table border="0" bgcolor="#EEEEEE">
<tr><td>
<pre>
toolbar = gtk_toolbar_new ();
gtk_toolbar_set_orientation (GTK_TOOLBAR (toolbar), GTK_ORIENTATION_HORIZONTAL);
gtk_toolbar_set_style (GTK_TOOLBAR (toolbar), GTK_TOOLBAR_ICONS);

  toolbar_icon = gtk_image_new_from_stock (GTK_STOCK_NEW, GTK_ICON_SIZE_SMALL_TOOLBAR);
  gtk_toolbar_append_item (GTK_TOOLBAR (toolbar), _("New"), _("New document"), _("New document"), toolbar_icon, new_file, NULL);
<br>
  toolbar_icon = gtk_image_new_from_stock (GTK_STOCK_OPEN, GTK_ICON_SIZE_SMALL_TOOLBAR);
  gtk_toolbar_append_item (GTK_TOOLBAR (toolbar), _("Open"), _("Open file"), _("Open file"), toolbar_icon, select_open_file, NULL);
<br>
  toolbar_icon = gtk_image_new_from_stock (GTK_STOCK_SAVE, GTK_ICON_SIZE_SMALL_TOOLBAR);
  gtk_toolbar_append_item (GTK_TOOLBAR (toolbar), _("Save"), _("Save current file"), _("Save current file"), toolbar_icon, save_file, NULL);
</pre>
</td></tr>
</table>
</p>

<h2>Application help interface</h2>
<p>
</p>
<p>
Libgpewidget provides a simple interface to access help information from applications.
It is intended to be used for providing full text help and background information 
in more complex applications. The help information is stored in a defined 
location and uses a defined file format that is opened by an external application. <br>
Current implementation uses help information that is stored HTML files. The
location in filesystem is $PREFIX/share/doc/gpe. The default prefix in GPE is "/usr".
</p>
<p>
The help interface consists of only one call:<br>
<pre>
gboolean gpe_show_help(const char* book, const char* topic)
</pre>
Return value is FALSE if help is found and displayed, TRUE if an error occurs.
The parameters "book" and "topic" are used to specify the help source and 
location of the topic in the source. Current implementation in libgpewidget
will create an URL if this type:
<pre>
file:///$PREFIX/share/doc/gpe/<book>.html#<topic>
</pre>
This URL is opened with a known help viewer. Currently this defaults to dillo 
HTML browser, but this may change in future.
</p>
<!--#include virtual="/includes/foot.shtml"-->
