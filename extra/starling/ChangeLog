2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/starling.c (struct _Starling): Add field search_entry.
	(regen_source): New variable.
	(search_text_changed): Move body from here...
	(search_text_regen): ... to this new function.  Don't treat the
	search text as a single string, instead, search for the occurance
	of each word.
	(search_text_changed): If REGEN_SOURCE is not 0, remove the
	timeout.  Set a timeout to call search_text_regen.
	(starling_run): Save the search entry in ST->SEARCH_ENTRY.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.h (music_db_play_queue_clear): New declaration.
	* src/musicdb.c (music_db_play_queue_clear): New function.
	* src/starling.c (clear_queue_cb): New function.
	(starling_run): In the clear all menu item, make the a the active
	key.  Create a new menu item for clearing the queue, connect
	clear_queue_cb to it.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/player.c (player_get_source): Call g_object_get, not
	g_object_set.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.c (whitelist): Add ".flac" and ".FLAC".

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.h (music_db_count): Take additional parameter
	constraint.
	* src/musicdb.c (struct _MusicDB): Remove field count.
	(music_db_init): Don't initialize DB->COUNT.
	(music_db_count): Take additional parameter constraint.  If not
	NULL or the empty string, add to the SQL query.  Don't save result
	in DB->COUNT.
	(music_db_add): Don't update DB->COUNT.
	(music_db_remove): Likewise.
	(music_db_clear): Likewise.
	(music_db_for_each): If CONSTRAINT is the empty string, treat it
	as if it were NULL.
	* src/playlist.h (play_list_constrain): New declaration.
	* src/playlist.c (struct _PlayList): Add field constraint.
	(play_list_dispose): Free PL->CONSTRAINT.
	(do_refresh): Pass PL->CONSTRAINT to music_db_count and
	music_db_for_each.
	(play_list_constrain): New function.
	* src/starling.c (search_text_changed): New function.
	(starling_run): Add a search box.  Connect it to
	search_text_changed.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/starling.c (struct _Starling): Add field notebook.
	(jump_to_current): New function.
	(starling_run): Put the title and "jump to current" button in the
	main box, not in the player tab.  Connect the jump_to button's
	clicked event to jump_to_current.  Save the notebook in
	ST->NOTEBOOK.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.h (music_db_for_each): Add parameter constraint.
	Update users.
	* src/musicdb.c (music_db_for_each): Add parameter constraint.  If
	not NULL, use it when constructing the SQL statement.
	* src/starling.c (queue_album_cb): Don't match in the callback
	function, use music_db_for_each's constraint parameter.
	(queue_artist_cb): Likewise.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.h (struct _MusicDBClass): Add fields
	added_to_queue_signal_id and removed_from_queue_signal_id.
	* src/musicdb.c (music_db_class_init): Register signals
	"added-to-queue" and "removed-from-queue".
	(music_db_play_queue_enqueue): On success, emit the
	"added-to-queue" signal.
	(music_db_play_queue_dequeue): On success, emit the
	"removed-from-queue" signal.
	(music_db_play_queue_remove): Likewise.
	* src/playlist.c (struct _PlayList): Add fields
	added_to_queue_signal_id, and removed_from_queue_signal_id.
	(play_list_dispose): Disconnect the signal
	PL->ADDED_TO_QUEUE_SIGNAL_ID and PL->REMOVED_FROM_QUEUE_SIGNAL_ID.
	(added_to_queue): New function.
	(removed_from_queue): Likewise.
	(play_list_new): Only connect to DB's "new-entry" signal if in
	library mode.  Connect to DB's "added-to-queue" and DB's
	"removed-from-queue" signals.

2008-09-22  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.c (music_db_create_table): Remove extra comma.

2008-09-21  Neal H. Walfield  <neal@gnu.org>

	* src/starling.c (struct menu_info): New structure.
	(menu_destroy): New function.
	(queue_song_cb): Likewise.
	(queue_album_cb): Likewise.
	(queue_artist_cb): Likewise.
	(library_button_press_event): Likewise.
	(starling_run): Connect library_button_press_event to
	ST->LIBRARY_VIEW's "button-press-event" event.

2008-09-21  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.c (music_db_create_table): Drop table queue.
	(music_db_play_queue_enqueue): Correct sql syntax.

2008-09-21  Neal H. Walfield  <neal@gnu.org>

	* src/player.c (player_unpause): If PL->PLAYBIN is false, emit an
	"eos" signal.

2008-09-21  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.h (music_db_play_queue_enqueue): New declaration.
	(music_db_play_queue_dequeue): Likewise.
	(music_db_play_queue_count): Likewise.
	(music_db_play_queue_query): Likewise.
	(music_db_play_queue_remove): Likewise.
	(music_db_queue_for_each): Likewise.
	* src/musicdb.c (music_db_create_table): Create table queue.
	(struct info_callback_data): New structure.
	(music_db_for_each.callback): Move from here...
	(info_callback): ... to here.  Interpret the first argument as a
	struct info_callback_data.  Use it.  Update callers.
	(music_db_play_queue_enqueue): New function.
	(music_db_play_queue_dequeue): Likewise.
	(music_db_play_queue_count): Likewise.
	(music_db_play_queue_query): Likewise.
	(music_db_play_queue_remove): Likewise.
	(music_db_queue_for_each): Likewise.
	* src/playlist.h (enum play_list_mode): New enumeration.
	(play_list_new): Take additional parameter mode.  Update callers.
	(play_list_uid_to_index): New declaration.
	* src/playlist.c (struct _PlayList): Add field mode.
	(do_refresh): If PL->MODE is PLAY_LIST_QUEUE, set PL->COUNT to the
	result of music_db_play_queue_count, and call
	music_db_queue_for_each instead of music_db_for_each.
	(play_list_uid_to_idx): Rename from this...
	(play_list_uid_to_index): ... to this.  Make extern.  If UID does
	not exist in the hash, return -1.  Update callers.
	(changed_entry): If play_list_uid_to_index returns -1, just
	return.
	(play_list_new): Take additional parameter mode.  Save in PL->MODE.
	(play_list_remove): If PL->MODE is PLAY_LIST_QUEUE, call
	music_db_play_queue_remove instead of music_db_remove.
	* src/starling.c (struct _Starling): Rename field treeview_window
	to library_view_window, treeview to library_view, and mdb to db.
	Update users.  Add fields queue_view_window, queue_view, and
	queue.
	(starling_play): Move loading functionality...
	(starling_load): ... to this new function.
	(starling_next): Move advancement functionality...
	(starling_advance): ... to this new function.  Take from the play
	queue if it is not empty.
	(starling_prev): Implement in terms of starling_advance.
	(deserialize): When restoring the select entry, load it.
	(starling_run): Set ST->QUEUE to a a new play list in queue mode.
	Create a notebook tab for the play queue.

2008-09-20  Neal H. Walfield  <neal@gnu.org>

	* src/playlist.c (changed_entry): Schedule a refresh.

2008-09-20  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.c (struct _MusicDB): Add field fs_scanner.
	(music_db_finalize): If DB->FS_SCANNER is not 0, remove the
	source.
	(struct fs_scanner): New structure.
	(busy_handler): New function.
	(music_db_open): Set DB->SQLITEH's busy handler to it.  Set up an
	idle call back to fs_scanner.  Allocate an extra sqlite instance
	for it.
	(fs_scanner_thread): New function.
	(fs_scanner): Likewise.
	(music_db_add): Take additional parameter sqliteh.  Use it instead
	of DB->SQLITEH.  Update callers.
	(music_db_add_file): Move body of this function to...
	(music_db_add_file_internal): ... this new function.
	(music_db_add_file): Implement in terms of the new function.
	(music_db_add_recursive_internal): Take additional parameter
	sqliteh.  Use it instead of DB->SQLITEH.  Update callers.
	(music_db_add_recursive): Don't append a '/' to PATH when
	inserting in the database.  Update path matching code accordingly.

2008-09-20  Neal H. Walfield  <neal@gnu.org>

	* src/musicdb.c (music_db_add_recursive): Move body of
	functionality from here...
	(music_db_add_recursive_internal): ... to this new function.
	Update to call this function, not music_db_add_recursive,
	recursively.
	(music_db_add_recursive): Add FILENAME to the dirs table if it (or
	a filename that dominates it) is not already there.  Remove any
	filenames that PATH dominates.

2008-09-20  Neal H. Walfield  <neal@gnu.org>

	* config.h: Restore file.  Only define CONFIGDIR.
	* src/starling.h: Don't include <libintl.h>.
	(_): Move from here...
	* src/config.h: ... to here.
	* src/starling.h (gettext_noop): Move from here...
	* src/config.h: ... to here.
	* src/starling.h (N_): Move from here...
	* src/config.h: ... to here.
	* src/starling.c (CONFIG_FILE): Define.
	* src/lastfm.c: Include "starling.h".

2008-09-19  Neal H. Walfield  <neal@gnu.org>

	Split playlist.c into playlist.c, musicdb.c, player.c and
	starling.c.  Move main.c and config.c into starling.c.
	* src/playlist.h: Include "musicdb.h".
	(struct _PlayListClass): Remove fields new_stream_signal_id,
	deleted_stream_signal_id, cleared_signal_id, swap_signal_id,
	state_changed_signal_id, and eos_signal_id.
	(play_list_open): Move declaration from here...
	* src/musicdb.h (music_db_open): ... to this file.  Update users.
	* src/playlist.h (play_list_new): New declaration.
	(play_list_set_random): Move declaration from here...
	* src/starling.h (starling_random_set): ... to here.
	* src/playlist.h (play_list_get_random): Move declaration from
	here...
	* src/starling.h (starling_random): ... to here.
	* src/playlist.h (play_list_play): Move declaration from here...
	* src/player.h (player_play): ... to here.
	* src/playlist.h (play_list_pause): Move declaration from here...
	* src/player.h (player_pause): ... to here.
	* src/playlist.h (play_list_unpause): Move declaration from
	here...
	* src/player.h (player_unpause): ... to here.
	* src/playlist.h (play_list_play_pause_toggle): Move declaration
	from here...
	* src/player.h (player_play_pause_toggle): ... to here.
	* src/playlist.h (play_list_next): Move declaration from here...
	* src/starling.h (starling_next): ... to here.
	* src/playlist.h (play_list_prev): Move declaration from here...
	* src/starling.h (starling_prev): ... to here.
	* src/playlist.h (play_list_seek): Move declaration from here...
	* src/starling.h (player_seek): ... to here.
	* src/playlist.h (play_list_query_position): Move declaration from
	here...
	* src/starling.h (player_query_position): ... to here.
	* src/playlist.h (play_list_query_duration): Move declaration from
	here...
	* src/starling.h (player_query_duration): ... to here.
	* src/playlist.h (play_list_add_m3u): Move declaration from
	here...
	* src/musicdb.h (music_db_add_m3u): ... to here.
	* src/playlist.h (play_list_add_uri): Move declaration from
	here...
	* src/musicdb.h (music_db_add_uri): ... to here.
	* src/playlist.h (play_list_add_file): Move declaration from
	here...
	* src/musicdb.h (music_db_add_file): ... to here.
	* src/playlist.h (play_list_add_recursive): Move declaration from
	here...
	* src/musicdb.h (music_db_add_recursive): ... to here.
	* src/playlist.h (play_list_remove): Move declaration from
	here...
	* src/musicdb.h (music_db_remove): ... to here.
	* src/playlist.c: Don't include "cache.h".  Include "musicdb.h".
	(struct info_cache_entry, info_cache_evict, info_cache)
	(info_cache_constructor): Move from here...
	* src/musicdb.c: ... to this new file.
	* src/playlist.c (struct _PlayList): Remove fields sqliteh,
	playbin, last_state, random, meta_data_reader,
	meta_data_reader_pending.  Add fields db, new_entry_signal_id
	changed_entry_signal_id, deleted_entry_signal_id,
	cleared_signal_id, reschedule_timeout, and reschedule_requests.
	(play_list_class_init): Move initialization for "state-changed"
	and "eos" signals from here...
	* src/player.c (player_class_init): ... to here.
	* src/playlist.c (play_list_init): Move gstreamer initialization
	from here...
	* src/player.c (player_init): ... to here.
	* src/playlist.c (play_list_dispose): Disconnect the signal
	handlers connected to PL->DB.  Remove any reschedule timeout.
	Unref PL->DB.
	(play_list_finalize): Move meta-data clean up, sqlite clean up and
	playbin clean up from here...
	* src/player.c (music_db_finalize): ... to here.
	* src/playlist.c (play_list_idx_uid_refresh): Move functionality
	from this function...
	(do_refresh): ... to this new function.  Only execute if
	PL->RESCHEDULE_REQUEST is less than or equal to 10.  If so, divide
	by 2 and then return scheduling another call.  Don't access the
	database directly, instead use music_db_for_each.  Update
	PL->COUNT correctly.  Clear PL->RESCHEDULE_TIMEOUT and
	PL->RESCHEDULE_REQUESTS.
	(play_list_idx_uid_refresh): Schedule a call to do_refresh.  Take
	additional parameter now.  If true, refresh immediately otherwise,
	do so lazily.
	(parse_tags): Move from here...
	* src/musicdb.c (parse_tags): ... to here.  Don't access database
	directly, instead call music_db_set_info_from_tags.
	* src/playlist.c (play_list_bus_cb): Move from here...
	* src/player.c (player_bus_cb): ... to here.  On tag availability,
	emit a "tags" signal.  Update "state-changed" and "eos" signal
	invocations.
	* src/playlist.c (new_entry): New function.
	(changed_entry): Likewise.
	(deleted_entry): Likewise.
	(cleared): Likewise.
	(play_list_create_table): Move from here...
	* src/musicdb.c (music_db_create_table): ... to here.
	* src/playlist.c (play_list_open): Move from here...
	* src/musicdb.c (music_db_open): ... to here.  Don't create the
	config table.
	* src/playlist.c (playbin_ensure): Move from here...
	* src/player.c (playbin_ensure): ... to here.
	* src/playlist.c (play_list_set_sink): Move from here...
	* src/player.c (player_set_sink): ... to here.
	* src/playlist.c (play_list_new): New function.
	(play_list_set_random): Remove function.
	(play_list_get_random): Likewise.
	* src/playlist.c (playlist_play): Move from here...
	* src/starling.c (starling_play): ... to here.  Take a Starling *,
	not a Playlist *.  Change to use player_set_source and
	player_play.
	* src/playlist.c (play_list_pause): Move from here...
	* src/starling.c (player_pause): ... to here.
	* src/playlist.c (play_list_unpause): Move from here...
	* src/starling.c (player_unpause): ... to here.
	* src/playlist.c (play_list_play_pause_toggle): Move from here...
	* src/starling.c (player_play_pause_toggle): ... to here.
	* src/playlist.c (play_list_playing): Move from here...
	* src/starling.c (player_playing): ... to here.
	* src/playlist.c (do_goto): Move body from here...
	(play_list_goto): ... to here.  Don't start playing.
	* src/playlist.c (play_list_random_next): Move from here...
	* src/starling.c (do_random_next): ... to here.
	* src/playlist.c (play_list_next): Move from here...
	* src/starling.c (starling_next): ... to here.
	* src/playlist.c (play_list_prev): Move from here...
	* src/starling.c (starling_prev): ... to here.
	* src/playlist.c (play_list_seek): Move from here...
	* src/starling.c (player_seek): ... to here.
	* src/playlist.c (play_list_query_position): Move from here...
	* src/starling.c (player_query_position): ... to here.
	* src/playlist.c (play_list_query_duration): Move from here...
	* src/starling.c (player_query_duration): ... to here.
	* src/playlist.c (meta_data_reader): Move from here...
	* src/musicdb.c (meta_data_reader): ... to here.  When tags are
	available, call music_db_set_info_from_tags to save the tags.
	* src/playlist.c (play_list_add): Move from here...
	* src/musicdb.c (music_db_add): ... to here.  Don't update the
	model.  Instead, emit a "new-entry" signal.
	* src/playlist.c (play_list_add_m3u): Move from here...
	* src/musicdb.c (music_db_add_m3u): ... to here.
	* src/playlist.c (play_list_add_uri): Move from here...
	* src/musicdb.c (music_db_add_uri): ... to here.
	* src/playlist.c (play_list_add_file): Move from here...
	* src/musicdb.c (music_db_add_file): ... to here.
	* src/playlist.c (has_audio_extension): Move from here...
	* src/musicdb.c (has_audio_extension): ... to here.
	* src/playlist.c (play_list_add_recursive): Move from here...
	* src/musicdb.c (music_db_add_recursive): ... to here.
	* src/playlist.c (play_list_save_m3u): Remove function.
	* src/playlist.c (play_list_remove): Move from here...
	* src/musicdb.c (music_db_remove): ... to here.  Don't update the
	model or index map.  Instead, emit a "deleted-entry" signal.
	Don't drop the cache, just shootdown the entry.
	* src/playlist.c (play_list_clear): Move from here...
	* src/musicdb.c (music_db_clear): ... to here.
	* src/playlist.c (play_list_get_info_by_uid): Move from here...
	* src/musicdb.c (music_db_get_info): ... to here.
	* src/playlist.c (play_list_get_info): Implement in terms of
	music_db_get_info.
	* src/playlist.c (get_iter): If PATH's depth is not 1, return
	FALSE.  If INDICES is NULL, return FALSE.
	* src/playlist.c (get_value): Call play_list_idx_to_uid to get the
	uid associated with the entry at position I.  Call
	music_db_get_info, not play_list_get_info to get the info.
	* src/main.c: Move all functions except main from this file to...
	* src/starling.c: ... this new file.
	* src/main.c (main): Just perform general initialization,
	instantiate a starling instance and start the gtk main loop.
	* src/starling.h (struct _Starling): Move definition from here...
	* src/starling.c: ... to here.  Add fields player, mdb and pl.
	Remove field keyfile and random.
	(starling_random): New function.
	(starling_random_set): Likewise.
	* src/config.c (KEYRANDOM, KEYLASTPATH, KEYSINK, KEYLFMUSER)
	(KEYLFMPASSWD, KEY_WIDTH, KEY_HEIGHT): Move from here...
	* src/starling.c: ... to here.
	* src/config.c (config_load): Move from here...
	* src/starling.c (deserialize): ... to here.  Only keep the key
	file around for the duration of the function.  Also restore the
	view's position and current track.  Update users.
	* src/config.c (config_save, config_store_lastfm): Move from
	here...
	* src/starling.c (serialize): ... to here.  Only keep the key
	file around for the duration of the function.  Also save the
	view's position and current track.  Update users.
	* src/config.c: Remove file.
	* src/config.h: Remove file.
	* src/marshal.list (VOID:OBJECT,INT): Remove interface.
	(VOID:INT,INT): Likewise.
	(VOID:POINTER,INT): New interface.
	(VOID:POINTER,OBJECT): Likewise.
	* src/Makefile.am: Remove files config.h, and config.c.  Add fiels
	starling.c, musicdb.h, musicdb.c, player.h, player.c, marshal.c,
	and marshal.h.
	(nodist_starling_SOURCES): Remove variable.
	* src/config.c: Remove file.
	* src/config.h: Likewise.

2008-09-06  Neal H. Walfield  <neal@gnu.org>

	* src/playlist.h (PL_COL_TRACK): Define.
	(play_list_add_m3u): Remove parameter index.  Update users.
	(void play_list_add_uri): Likewise.
	(play_list_add_file): Likewise.
	(play_list_add_recursive): Likewise.
	(play_list_swap_pos): Remove function.
	(play_list_get_info): Change UID to an int *.  Add parameter
	track.  Update callers.
	* src/playlist.c (struct info_cache_entry): Add field track.
	Remove field uid.
	(info_cache_evict): Don't free E->UID.
	(play_list_get_info_by_uid): Update declaration to take additional
	parameter TRACK and to remove parameter INDEX.
	(struct _PlayList): Add fields SIZE, IDX_UID_MAP and UID_IDX_HASH.
	(play_list_init): Don't set PL->COUNT to -1.
	(play_list_finalize): Free PL->IDX_UID_MAP and PL->UID_IDX_HASH.
	(play_list_idx_uid_refresh): New function.
	(play_list_idx_to_uid): Likewise.
	(play_list_uid_to_idx): Likewise.
	(play_list_idx_uid_refresh): Also save the track number.  Assume
	UID is valid.  Update callers to make this so.  Invalidate the
	model as appropriate.  Call play_list_idx_to_uid_refresh.
	(play_list_bus_cb): Pass the correct UID when calling PARSE_TAGS.
	(play_list_create_table): Rename playlist table to files.  Add
	table dirs.  Update schema.  Bump version number.
	(play_list_count): If PL->IDX_UID_MAP is not valid, call
	PLAY_LIST_IDX_TO_UID_REFRESH and then return whatever PL->COUNT is.
	(play_list_play): Don't access the database directly.  Instead use
	play_list_get_info.
	(make_uid): Remove function.
	(meta_data_reader): Assume PL->META_DATA_READER_PENDING contains
	integers, not strings.
	(play_list_add): Remove parameter COUNT.  Use the new row's ROWID
	as its UID.  Update PL->IDX_UID_MAP and PL->UID_IDX_HAHS
	appropriately.  Update model.
	(play_list_add_m3u): Remove parameter POS.
	(play_list_add_uri): Remove parameter INDEX.
	(play_list_add_file): Remove parameter INDEX.
	(play_list_add_recursive): Remove parameter POS.
	(play_list_swap_pos): Remove function.
	(play_list_remove): Don't drop the cache.  Just shootdown the
	entry with uid UID.  Update PL->IDX_UID_MAP and PL->UID_IDX_HASH.
	(play_list_clear): Don't update the mode.  Just call
	play_list_idx_uid_refresh.
	(play_list_get_info_by_uid): Manage the entry cache by UIDs, not
	INDEXes.  Update appropriately.
	(play_list_get_info): Implement in terms of
	play_list_get_info_by_uid.
	(get_value): Don't include GTK_TREE_MODEL_ITERS_PERSIST in the
	flags that we support.
	(get_column_type): Support PL_COL_TRACK.  Return G_TYPE_INT for
	PL_COL_UID.
	(get_value): Support PL_COL_TRACK.  Return PL_COL_UID as an int.

2008-09-06  Neal H. Walfield  <neal@gnu.org>

	* src/main.c (main): Put ST->TREEVIEW in fixed height mode.  Set
	its column's sizing to be fixed.

2008-09-04  Neal H. Walfield  <neal@gnu.org>

	* src/Makefile.am (AM_CFLAGS): New variable.
	(starling_SOURCES): Add cache.h and cache.c.
	* src/cache.h: New file.
	* src/cache.c: Likewise.
	* src/playlist.c: Include "cache.h".
	(struct info_cache_entry): New struction.
	(info_cache_evict): New function.
	(info_cache): New local variable.
	(parse_tags): Shootdown affected entries.
	(play_list_add):
	(play_list_swap_pos): Likewise.
	(play_list_remove): Likewise.
	(play_list_clear): Likewise.
	(play_list_get_info): See if the entry is in the cache.  If so,
	use it.  If not and the entry exists, add it to the cache.

	(play_list_add): Emit TOTAL number of row-inserted events.
	(has_audio_extension): If we complete the loop, just return 0.

2008-09-04  Neal H. Walfield  <neal@gnu.org>

	* src/playlist.c (play_list_add): Don't add files that are already
	present in the database.

2008-09-04  Neal H. Walfield  <neal@gnu.org>

	* mkinstalldirs: Remove file.

2008-09-03  Neal H. Walfield  <neal@gnu.org>

	* HACKING: List required packages and note that autogen.sh needs
	to be run.

2008-09-03  Neal H. Walfield  <neal@gnu.org>

	* src/playlist.c (has_audio_extension): New function.
	(play_list_add_recursive): If we fail to open PATH as a directory,
	check if it is a regular, readable file.  Also check if PATH has a
	known file extension.

2008-05-20  Florian Boor  <florian.boor@kernelconcepts.de>

	* Release 0.3

2008-04-16  Neal H. Walfield  <neal@gnu.org>

        * src/playlist.c (IS_HILDON): Don't undefine.
        (struct _PlayList) [IS_HILDON]: remove field source.
        (playbin_ensure) [IS_HILDON]: Use playbinmaemo rather than
        playbin.
        (play_list_set_sink) [IS_HILDON]: Implement in the usual fashion.
        (play_list_play) [IS_HILDON]: Use the "uri", not the "location",
        property.

2008-03-28  Florian Boor  <florian.boor@kernelconcepts.de>

	* src/playlist.c (toplevel): Activate playbin for Maemo since it is
	  supposed to work again.

2008-01-11  Graham Cobb  <g+770@cobb.uk.net>

	* src/lastfm.c (HANDSHAKE_URI): Move to V1.2 of Audioscrobbler
	Realtime Submission Protocol (last.fm)

	* src/main.c (main): Create menu not menubar in chinook

2007-11-06  Graham Cobb  <g+770@cobb.uk.net>

	* src/main.c (main): changes for hildonprogram/hildonwindow in chinook

2007-11-04  Graham Cobb  <g+770@cobb.uk.net>

	* debian/rules (DEB_CONFIGURE_USER_FLAGS): use --enable-gpe

	* configure.ac, src/Makefile.am, src/main.c: build and compile
	changes for new hildon libraries in chinook

2007-07-23  Graham Cobb  <g+770@cobb.uk.net>

	* mkinstalldirs: add file

	* debian/rules: add options for maemo builds
	(this assumes the debian directory is not used for anything else)

2007-06-07  Florian Boor  <florian@linuxtogo.org>

	* Release 0.2
	* Rename configure.in to configure.ac like in all other bits.
	* Update i18n support in build tools to work with desktop file 
        and to pass distcheck.
	* refresh POTFILES.in

2007-02-25  Neal H. Walfield  <neal@gnu.org>

	* src/playlist.c (meta_data_reader): If possible, just set to
	GST_STATE_PAUSED to get the stream tags.  Break out of the loop
	once we reach our target state.

	(play_list_add_recursive): More aggressively yield.  Don't
	consider m3u files.

	* src/main.c (playlist_state_changed_cb): Simplify.
	(main): Call the quite menu item "Quit", not close.  Make the
	label containing the currently playing song ellipsizable.

2007-02-24  Neal H. Walfield  <neal@gnu.org>

	* src/main.c (playlist_add_cb): Use a file chooser.  Take an
	additional argument to determine whether to choose a file or a
	directory.
	(playlist_add_file_cb): New function.
	(playlist_add_directory_cb): New function.
	(main): Don't provide just an import menu item.  Provide both
	import file and an import directory items.
	[IS_HILDON]: Don't display a file menu.  Just add the menu items
	to the main menu.
	* src/starling.h: Remove field fs.

2007-02-23  Neal H. Walfield  <neal@gnu.org>

	* src/main.c: Include
	<hildon-fm/hildon-widgets/hildon-file-chooser-dialog.h>.
	(fs_cancel_cb): Remove function.
	(fs_accept_cb): Remove function.  Move body from here...
	(playlist_add_cb): ... to here.  Port to Maemo.

	(key_press_event) [IS_HILDON]: Make fullscreen button a play/pause
	button.  Map F8 to previous.

	* src/playlist.c [IS_HILDON]: Add field source.
	(play_list_play): Move playbin creation from here...
	(playbin_ensure): ... to this new function.
	[IS_HILDON]: Don't use a playbin but our own "special" pipeline.
	(play_list_set_sink) [IS_HILDON]: Don't do anything.
	[! IS_HILDON]: Ensure PL->PLAYBIN is valid.
	[IS_HILDON]: Set the "location" property on PL->SOURCE.

	(meta_data_reader): Don't reference PL.  Decode into a fakesink.
	Unref the bus.

	(play_list_bus_cb): Correctly case PL->PLAYBIN to a GST_OBJECT.

	* data/Makefile.am (desktop_DATA): Don't install starling.desktop
	on hildon.
	(pixmapdir): New variable.
	(pixmap_DATA): Likewise.
	(EXTRA_DIST): Add bass.png.
	* data/bass.png: New file, stolen from gpe-icons/default/bass.png.
	* data/starling.desktop.in (Icon): Change to bass.png.

2007-02-23  Neal H. Walfield  <neal@gnu.org>

	* configure.in: Don't require libsoup-2.2 version 2.2.94 or
	greater; just depend on libsoup-2.2.

	* Makefile.am (EXTRA_DIST): Add debian/changelog, debian/compat,
	debian/control and debian/rules.

	* debian/compat: Change it to 4.

	* debian/control (Build-Depends): Add it.
	(Depends): Correctly enumerate them.

	* hildon/Makefile.am (install-data-hook): Make
	$(DESTDIR)/etc/others-menu if it doesn't exist.

	* hildon/com.nokia.starling.service.in (Exec): It's
	@prefix@/bin/starling, not @prefix@/starling.
	* hildon/starling.desktop.in (Exec): Likewise.

2007-02-23  Neal H. Walfield  <neal@gnu.org>

	* src/main.c: Include <glib.h>.
	(main): Put the playlist in ~/.starling, not ~/.gpe.  Ensure this
	directory exists.

2007-02-23  Neal H. Walfield  <neal@gnu.org>

	* src/errorbox.c (starling_error_box): It's GTK_BUTTONS_OK, not
	GTK_RESPONSE_OK.

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* debian/changelog: New file.
	* debian/compat: New file.
	* debian/control: New file.
	* debian/rules: New file.

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* configure.in: Determine GLIB_GENMARSHAL after checking for
	pkg-config.

	* src/Makefile.am (starling_SOURCES): Don't forget a trailing \.

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* hildon/Makefile.am (install-data-hook): Respect $(DESTDIR).

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* configure.in: Use AC_CHECK_LIB, not AC_CHECK_FUNC, to check for
	hildon.  Generate hildon/starling.desktop
	hildon/com.nokia.starling.service hildon/Makefile.
	* Makefile.am [HILDON] (SUBDIRS): Add hildon.
	* hildon/Makefile.am: New file.
	* hildon/com.nokia.starling.service.in: Likewise.
	* hildon/starling.desktop.in: Likewise.

	* src/callbacks.h: Remove file.
	* src/callbacks.c: Remove file and move contents...
	* src/main.c: ... to this file.  Don't include include
	"callbacks.h".  Include "utils.h" and <gdk/gdkkeysyms.h>.
	(scroll_to_current): New function.
	(key_press_event): Likewise.
	(main): Change open, random, remove selected and clear all to the
	menu.  Add a quit menu entry.  Display the title and artist in the
	title bar.  Add a jump to button to the right of the title and
	artist display.
	(playlist_next_cb): Scroll to the new entry.
	(playlist_prev_cb): Likewise.
	* src/Makefile.am (starling_SOURCES): Remove callbacks.h and
	callbacks.c.
	* src/starling.h (struct _Starling): Remove files notebook, stop,
	next, prev, up, down, add, clear, save and remove.  Add field
	treeview_window.
	[IS_HILDON] (struct _Starling): Add field fullscreen.

	* src/config.c (config_save): Only save ST->FS_LAST_PATH if
	non-NULL.

	* src/playlist.c (play_list_random_next): If empty, immediately
	return 0.

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* src/main.c: Don't include "interface.h".
	* src/callbacks.c: Likewise.
	
2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* src/Makefile.am (starling_SOURCES): Remove interface.c and
	interface.h.
	* src/interface.h: Remove file.
	* src/interface.c: Remove file and move contents...
	* src/main.c: ... into this file.
	[IS_HILDON]: Include <hildon-widgets/hildon-app.h>,
	<hildon-widgets/hildon-appview.h> and <libosso.h>.
	[IS_HILDON] (APPLICATION_DBUS_SERVICE): Define.
	[IS_HILDON] (main): Initialize osso.  Use basic Hildon widgets
	where appropriate.  Use a toolbar for the previous, play/pause,
	next and random buttons.  Update users.  Likewise for the position
	scale.  Split ST->TIME into ST->POSITION and ST->DURATION.  Join
	the artist and title labels.
	* src/starling.h: Don't include <gtk/gtkwidget.h> or
	<gtk/gtkliststore.h>.  Include <gtk/gtk.h>.  Remove field time,
	add fields position and duration.  Remove field artist and bolded.
	* src/config.c (config_save): Get the random mode correctly.
	* src/callbacks.c (playlist_state_changed_cb): Don't change the
	play/pause button's image.  Update the play/pause buttons state as
	required.  Render the title correctly.

	* src/playlist.h (play_list_unpause): New prototype.
	* src/playlist.c (play_list_unpause): New function.
	* src/callbacks.c (playlist_playpause_cb): Don't just toggle the
	state; call either play_list_unpause or play_list_pause as a
	function of the button's state.
	
	* src/playlist.c (play_list_init): Don't initialize PL->POSITION
	to -1.
	(play_list_bus_cb): Only emit the changed signal if we have
	reached the target state.
	(play_list_seek): Ignore request if no stream is loaded.
	(play_list_query_duration): Don't return success if we haven't
	loaded a stream.
	(struct _PlayList): Add field last_state.
	(play_list_pause): If already playing, do nothing.
	(play_list_unpause): If already paused, do nothing.
	(play_list_bus_cb): Save state in PL->LAST_STATE.

	* src/callbacks.c (playlist_move_up_cb): Check that the swap is
	valid.
	(playlist_move_down_cb): Likewise.
	(scale_update_cb): If we fail to get the duration, just return.
	(playlist_state_changed_cb): If ARTIST or TITLE is NULL, don't
	fetch the lyrics.  On a new song, reset ST->CURRENT_LENGTH,
	ST->HAS_LYRICS and ST->ENQUEUED.

	* src/lastfm.h: Include "starling.h", not "startling.h".

	* src/lyrics.h: Include <libsoup/soup.h>.

	* src/config.c (KEY_WIDTH): New define.
	(KEY_HEIGHT): Likewise.
	(config_load): Correctly free memory.  Restore the size of the
	main window.
	(config_save): Save the size of the main window.

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* configure.in (starling_localedir): Don't use this.
	(PACKAGE_LOCALE_DIR): ... use this.
	(ENABLE_HILDON, IS_HILDON): Define according to whether we detect
	hildon.
	(GTK_CFLAGS): Don't AC_SUBST.
	(SQLITE_CFLAGS): Likewise.
	(LIBSOUP_CFLAGS): Likewise.
	(GPE_CFLAGS): Likewise.
	(DEPS_CFLAGS): AC_SUBST instead.
	(GTK_LIBS): Don't AC_SUBST.
	(SQLITE_LIBS): Likewise.
	(LIBSOUP_LIBS): Likewise.
	(GPE_LIBS): Likewise.
	(DEPS_LIBS): AC_SUBST instead.
	* src/Makefile.am (starling_LDADD): New variable.
	(noinst_HEADERS): Fold this...
	(starling_SOURCES): ... into this.
	(INCLUDES): Define.
	(starling_CFLAGS): Don't define.
	(starling_LDADD): Change to just $(DEPS_LIBS).

2007-02-22  Neal H. Walfield  <neal@gnu.org>

	* src/playlist.h: Rewrite.
	* src/playlist.c: Rewrite to make PlayList implement GtkTreeModel
	and, rather than keep everything in memory, use an sqlite DB as
	its backend.
	* src/stream.h: Remove file.
	* src/stream.c: Likewise.
	* src/Makefile.am (starling_SOURCES): Remove stream.c.
	(noinst_HEADERS): Remove stream.h.
	* src/callbacks.c: Don't include <gtk/gtkfilesel.h>,
	<gtk/gtktogglebutton.h>, <gtk/gtkrange.h>, <gtk/gtktreeview.h>,
	<gtk/gtkmain.h>, <gtk/gtkdialog.h>, <gtk/gtkentry.h>,
	<gtk/gtklabel.h>, <gtk/gtkstock.h> or <gtk/gtktextview.h>.
	Include <gtk/gtk.h> and "errorbox.h".
	(fs_accept_cb): Report errors.
	(playlist_remove_cb): Only remove selected rows.
	(playlist_activated_cb): Use play_list_goto.
	(playlist_playpause_cb): Use play_list_play_pause_toggle.
	(scale_update_cb): Use play_list_get_info.
	(new_tag_cb): Remove function.
	(new_stream_cb): Likewise.
	(deleted_stream_cb): Likewise.
	(playlist_cleared_cb): Likewise.
	(playlist_swap_cb): Likewise.
	(playlist_bold_item): Likewise.
	(callbacks_setup): Don't listen for the "new-stream",
	"deleted-stream", "cleared" or "swap" signals on ST->PL.
	* src/config.c (KEYLOADPLAYLIST): Don't define.
	(DEFKEYLOADPLAYLIST): Likewise.
	(config_init): Don't set the KEYLOADPLAYLIST group.
	(config_load): Don't read the KEYLOADPLAYLIST group.
	* src/interface.h: Don't enumerate columns.
	(player_init): Don't declare.
	* src/interface.c Don't include <gtk/gtkwindow.h>,
	<gtk/gtkstock.h>, <gtk/gtkhscale.h>, <gtk/gtkcellrenderertext.h>,
	<gtk/gtkscrolledwindow.h>, <gtk/gtklabel.h>, <gtk/gtkhbox.h>,
	<gtk/gtkvbox.h>, <gtk/gtkcheckbutton.h>, <gtk/gtkvseparator.h>,
	<gtk/gtkhseparator.h>, <gtk/gtkalignment.h>, <gtk/gtktreeview.h>,
	<gtk/gtknotebook.h>, <gtk/gtktextview.h> or <gtk/gtkentry.h>.
	Include <string.h> and <gtk/gtk.h>.
	(title_data_func): New function.
	(interface_init): Use ST->PL as the tree view.  Use
	title_data_func to render the cells.
	(player_init): Move from here...
	* src/main.c (main): ... into this function.  Use it before
	calling interface_init.
	Include "starling.h".
	* src/utils.h: Don't include "stream.h".
	(pretty_stream_name): Remove prototype.
	* src/utils.c (escape_spaces): Remove function.

	* NEWS: New file.

2007-02-19  Neal H. Walfield  <neal@gnu.org>

	* configure.in: Check for gstreamer-plugins-base-0.10.

	* src/main.c: Include <locale.h>.

	* src/errorbox.c: Include <stdio.h>.

	* src/callbacks.h (CALLBACKS_H): It's CALLBACKS_H, not
	cALLBACKS_H.

